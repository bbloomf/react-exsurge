{"version":3,"sources":["../../../src/components/Exsurge.tsx"],"names":["React","useState","useRef","useEffect","useCallback","useMemo","WebFont","exsurge","usePrevious","useArray","getNotYetLoadedFonts","resolveFont","createReactSvg","svgTree","createElement","name","Fragment","props","children","map","Exsurge","gabc","useDropCap","annotation","contentEditable","alignment","width","height","zoom","selection","id","style","className","svgClass","supertitle","title","subtitle","textLeft","textRight","defaultFont","defaultColor","defaultTitleAlignment","font","staffSize","baseFontSize","interSyllabicSpacing","spaceBetweenSystems","spaceAboveLyrics","textStyles","onScoreUpdate","onRender","onKeyDown","mapAnnotationSpansToTextLeft","addSvgClass","node","propKey","classNamePrefix","supertitleSize","size","titleSize","subtitleSize","leftRightSize","leftRight","annotationArray","Array","textFontsArray","dropCap","al","choralSign","lyric","translation","textSizesArray","textColorsArray","color","titleAlignmentsArray","setRenderCount","ctxtRef","headerLenRef","fontLoaded","setFontLoaded","current","ctxt","ChantContext","TextMeasuringStrategy","Canvas","specialCharProperties","textAfterSpecialChar","autoColor","setRubricColor","minSpaceAboveStaff","specialCharMap","greextraGlyphs","StarSix","Dagger","asteriskProperties","plusProperties","editable","useExtraTextOnly","handleScoreUpdate","score","gabcHeaderLen","scoreRef","getScore","ChantScore","process","env","NODE_ENV","loadedFontsRef","loadedFonts","fontsUsedButNotLoaded","Set","families","from","length","load","google","classes","fontactive","familyName","fvd","fontinactive","resolveLocalFont","newFont","interSyllabicMultiplier","setStaffHeight","interVerbalMultiplier","minSpaceBelowStaff","setFont","k","textType","Object","entries","TextTypes","key","textStyle","defaultSize","undefined","defaultLanguage","language","forceLayout","recreateDropCap","insertion","element","selectionInsertion","afterElementIndex","chantLine","previousSelectionInsertion","elementSelection","Gabc","updateMappingsFromSource","mappings","updateNotations","Annotations","titles","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","performLayout","layoutChantLines","paginate","count","newSelection","updateSelection","divs","pages","page","i","createSvgTree"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport WebFont from \"webfontloader\";\nimport * as exsurge from \"exsurge\";\nimport { SvgTreeNode } from \"exsurge\";\nimport { TextTypesOptions } from \"../interfaces/TextTypeOptions\";\nimport { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport useArray from \"../hooks/useArray\";\nimport getNotYetLoadedFonts from \"../utils/getNotYetLoadedFonts\";\nimport resolveFont from \"../utils/resolveFont\";\n\nexport interface SharedExsurgeProps {\n  useDropCap?: boolean;\n  annotation?: string | string[];\n  contentEditable?: boolean;\n  alignment?: \"english\" | \"latin\";\n  width?: number;\n  height?: number;\n  zoom?: number;\n  selection?: exsurge.Selection;\n\n  id?: string;\n  style?: any;\n  className?: string;\n  svgClass?: string;\n\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  textLeft?: string;\n  textRight?: string;\n\n  defaultFont?: string;\n  defaultColor?: string;\n  defaultTitleAlignment?: string;\n\n  font?: string;\n  baseFontSize?: number;\n  staffSize?: number;\n  interSyllabicSpacing?: number;\n  spaceBetweenSystems?: number;\n  spaceAboveLyrics?: number;\n\n  textStyles?: TextTypesOptions;\n\n  onScoreUpdate?(score: exsurge.ChantScore, gabceHeaderLen: number): any;\n  onRender?: () => void;\n  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): any;\n  mapAnnotationSpansToTextLeft?: exsurge.AnnotationSpansToTextLeftMapper;\n}\n\nconst createReactSvg = (\n  svgTree: exsurge.SvgTreeNode | string\n): React.ReactElement | string =>\n  typeof svgTree === \"string\"\n    ? svgTree\n    : React.createElement(\n        svgTree.name || React.Fragment,\n        svgTree.props,\n        ...(svgTree.children || []).map(createReactSvg)\n      );\n\nexport interface ExsurgeProps extends SharedExsurgeProps {\n  gabc: string;\n}\n\nconst Exsurge: React.FC<ExsurgeProps> = ({\n  gabc,\n  useDropCap = true,\n  annotation = [],\n  contentEditable = false,\n  alignment = \"latin\",\n  width = -1,\n  height = -1,\n  zoom,\n  selection,\n\n  id,\n  style,\n  className,\n  svgClass,\n\n  supertitle,\n  title,\n  subtitle,\n  textLeft,\n  textRight,\n\n  defaultFont = \"EB Garamond\",\n  defaultColor = \"#000000\",\n  defaultTitleAlignment = \"center\",\n\n  font,\n  staffSize = 37.5,\n  baseFontSize = (staffSize * 19.2) / 37.5,\n  interSyllabicSpacing = 2.5,\n  spaceBetweenSystems = 1.5,\n  spaceAboveLyrics = 0.75,\n\n  textStyles = {},\n\n  onScoreUpdate,\n  onRender,\n  onKeyDown,\n  mapAnnotationSpansToTextLeft,\n}: ExsurgeProps) => {\n  const addSvgClass = useMemo(\n    () =>\n      svgClass\n        ? (node: SvgTreeNode) => {\n            const props = node.props || (node.props = {});\n            const propKey = 'class' in props ? 'class' : 'className';\n            const classNamePrefix = props[propKey]\n              ? props[propKey] + \" \"\n              : \"\";\n            props[propKey] = classNamePrefix + svgClass;\n            return node;\n          }\n        : (node: SvgTreeNode) => node,\n    [svgClass]\n  );\n\n  const supertitleSize = textStyles.supertitle?.size;\n  const titleSize = textStyles.title?.size;\n  const subtitleSize = textStyles.subtitle?.size;\n  const leftRightSize = textStyles.leftRight?.size;\n\n  const annotationArray = useArray(\n    annotation instanceof Array ? annotation : [annotation]\n  );\n  const textFontsArray = useArray([\n    textStyles.supertitle?.font,\n    textStyles.title?.font,\n    textStyles.subtitle?.font,\n    textStyles.leftRight?.font,\n    textStyles.annotation?.font,\n    textStyles.dropCap?.font,\n    textStyles.al?.font,\n    textStyles.choralSign?.font,\n    textStyles.lyric?.font,\n    textStyles.translation?.font,\n    font,\n    defaultFont,\n  ]);\n  const textSizesArray = useArray([\n    textStyles.supertitle?.size,\n    textStyles.title?.size,\n    textStyles.subtitle?.size,\n    textStyles.leftRight?.size,\n    textStyles.annotation?.size,\n    textStyles.dropCap?.size,\n    textStyles.al?.size,\n    textStyles.choralSign?.size,\n    textStyles.lyric?.size,\n    textStyles.translation?.size,\n  ]);\n  const textColorsArray = useArray([\n    textStyles.supertitle?.color,\n    textStyles.title?.color,\n    textStyles.subtitle?.color,\n    textStyles.leftRight?.color,\n    textStyles.annotation?.color,\n    textStyles.dropCap?.color,\n    textStyles.al?.color,\n    textStyles.choralSign?.color,\n    textStyles.lyric?.color,\n    textStyles.translation?.color,\n  ]);\n  const titleAlignmentsArray = useArray([\n    textStyles.supertitle?.alignment,\n    textStyles.title?.alignment,\n    textStyles.subtitle?.alignment,\n  ]);\n\n  const [, setRenderCount] = useState(0);\n  const ctxtRef: React.MutableRefObject<\n    exsurge.ChantContext | undefined\n  > = useRef();\n  const headerLenRef = useRef(0);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!ctxtRef.current) {\n    let ctxt = (ctxtRef.current = new exsurge.ChantContext(\n      exsurge.TextMeasuringStrategy.Canvas\n    ));\n\n    ctxt.specialCharProperties[\"font-family\"] = `Versiculum`;\n    ctxt.specialCharProperties[\"font-variant\"] = \"normal\";\n    ctxt.specialCharProperties[\"font-weight\"] = \"400\";\n    ctxt.textAfterSpecialChar = \"\";\n    ctxt.autoColor = false;\n    ctxt.setRubricColor(\"\");\n    ctxt.minSpaceAboveStaff = 0;\n    ctxt.specialCharMap['*'] = exsurge.greextraGlyphs.StarSix;\n    ctxt.specialCharMap['+'] = exsurge.greextraGlyphs.Dagger;\n    ctxt.asteriskProperties[\"font-family\"] = `greextra`;\n    ctxt.plusProperties[\"font-family\"] = `greextra`;\n    \n\n    ctxt.editable = !!contentEditable;\n\n    ctxt.useExtraTextOnly = !contentEditable;\n\n  }\n\n  const ctxt: exsurge.ChantContext = ctxtRef.current;\n  useEffect(() => {\n    if (typeof mapAnnotationSpansToTextLeft === 'function') {\n      ctxt.mapAnnotationSpansToTextLeft = mapAnnotationSpansToTextLeft;\n    }\n  }, [ctxt, mapAnnotationSpansToTextLeft])\n\n  const handleScoreUpdate = useCallback(\n    (score, gabcHeaderLen) => onScoreUpdate?.(score, gabcHeaderLen),\n    [onScoreUpdate]\n  );\n  const scoreRef: React.MutableRefObject<\n    exsurge.ChantScore | undefined\n  > = useRef();\n  function getScore() {\n    if (!scoreRef.current) scoreRef.current = new exsurge.ChantScore(ctxt);\n    return scoreRef.current;\n  }\n\n  const score = getScore();\n  if (process.env.NODE_ENV === \"development\") {\n    // DEBUG: window.$score = score;\n  }\n\n  // load font.  Right now we use Google, but webfontloader supports\n  // • edgewebfonts.adobe.com\n  // • Fontdeck.com\n  // • Fonts.com\n  // • Typekit.com\n  const loadedFontsRef: React.MutableRefObject<LoadedFontsDictionary> = useRef(\n    {}\n  );\n  useEffect(() => {\n    // TODO...keep track of whether Bold, Italic, etc. are needed, and load them as necessary\n\n    // first calculate which distinct fonts we need:\n    const loadedFonts = loadedFontsRef.current,\n      fontsUsedButNotLoaded = new Set(\n        getNotYetLoadedFonts(textFontsArray, loadedFonts)\n      ),\n      families = Array.from(fontsUsedButNotLoaded).map(\n        (font) => `${font}:400,400i,700,700i`\n      );\n    if (families.length) {\n      setFontLoaded(false);\n      WebFont.load({\n        google: {\n          families,\n        },\n        classes: false,\n        fontactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = true;\n            if (getNotYetLoadedFonts(textFontsArray, loadedFonts).length === 0)\n              // all required fonts have been loaded:\n              setFontLoaded(true);\n          }\n        },\n        fontinactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = false;\n          }\n        },\n      });\n    }\n  }, [textFontsArray]);\n\n  const resolveLocalFont = useCallback(\n    (newFont?: string) =>\n      resolveFont(loadedFontsRef.current, newFont, font, defaultFont),\n    [font, defaultFont]\n  );\n\n  // Set fonts, sizes, and colors:\n  useEffect(() => {\n    // don't set the fonts if they haven't yet loaded:\n    if (getNotYetLoadedFonts(textFontsArray, loadedFontsRef.current).length > 0)\n      return;\n    const interSyllabicMultiplier = interSyllabicSpacing;\n    ctxt.setStaffHeight(staffSize);\n    ctxt.interSyllabicMultiplier = interSyllabicMultiplier;\n    ctxt.interVerbalMultiplier = interSyllabicMultiplier * 0.25;\n    ctxt.spaceBetweenSystems = spaceBetweenSystems;\n    ctxt.minSpaceBelowStaff = spaceAboveLyrics;\n    ctxt.setFont(resolveLocalFont(textStyles.lyric?.font), baseFontSize);\n    for (let [k, textType] of Object.entries(exsurge.TextTypes)) {\n      // Is there a better way to do type assertion than this?\n      let key = k as keyof exsurge.TextTypes;\n      const textStyle = textStyles[key] || {};\n      // font\n      ctxt.textStyles[key].font = resolveLocalFont(textStyle.font);\n      // size\n      if (textType.defaultSize && textStyle.size !== undefined) {\n        ctxt.textStyles[key].size = textType.defaultSize(\n          textStyle.size * baseFontSize\n        );\n      }\n      // color\n      ctxt.textStyles[key].color = textStyle.color || defaultColor;\n      // alignment\n      switch (key) {\n        case \"supertitle\":\n        case \"title\":\n        case \"subtitle\":\n          ctxt.textStyles[key].alignment =\n            textStyle?.alignment || defaultTitleAlignment;\n          break;\n        // TODO: allow padding to be changed? on dropCap and annotation\n      }\n    }\n    ctxt.defaultLanguage = exsurge.language[alignment];\n    score.forceLayout = true;\n    // eslint-disable-next-line\n  }, [\n    fontLoaded,\n    font,\n    defaultFont,\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n\n    textSizesArray,\n    textFontsArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    ctxt,\n    score,\n  ]);\n\n  useEffect(() => {\n    score.useDropCap = useDropCap;\n    score.recreateDropCap(ctxt);\n    score.forceLayout = true;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [useDropCap, score, ctxt, handleScoreUpdate]);\n\n  const insertion =\n    selection && selection.element && selection.element.insertion;\n  const selectionInsertion = insertion\n    ? typeof insertion.afterElementIndex === \"number\"\n      ? insertion.afterElementIndex\n      : -1 - (insertion.chantLine || -1)\n    : undefined;\n  const previousSelectionInsertion = usePrevious(selectionInsertion);\n  const elementSelection = (selection && selection.element) || null;\n  useEffect(() => {\n    headerLenRef.current = exsurge.Gabc.updateMappingsFromSource(\n      ctxt,\n      score.mappings,\n      gabc,\n      selectionInsertion,\n      previousSelectionInsertion\n    );\n    score.updateNotations(ctxt);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [gabc, selectionInsertion, ctxt, score, handleScoreUpdate]);\n\n  useEffect(() => {\n    score.annotation = annotationArray.length\n      ? new exsurge.Annotations(ctxt, ...annotationArray)\n      : null;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [annotationArray, ctxt, score, handleScoreUpdate]);\n\n  // title effects:\n  useEffect(() => {\n    score.titles.setSupertitle(ctxt, supertitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, supertitle, supertitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTitle(ctxt, title);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, title, titleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setSubtitle(ctxt, subtitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, subtitle, subtitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextLeft(ctxt, textLeft);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textLeft, leftRightSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextRight(ctxt, textRight);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textRight, leftRightSize, handleScoreUpdate]);\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.performLayout(ctxt, score.forceLayout);\n    score.forceLayout = false;\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    handleScoreUpdate,\n  ]);\n\n  // const appendSvgForPage = useCallback(pageI => {\n  //   const svgParent = divRefs.current[pageI];\n  //   while (svgParent && svgParent.firstChild)\n  //     svgParent.removeChild(svgParent.firstChild);\n  //   let svg = svgRefs.current[pageI];\n  //   if (svgParent && svg) svgParent.appendChild(svg);\n  // }, []);\n\n  // const divRefs = useRef([]),\n  //   svgRefs = useRef([]);\n  // const [pageCount, setPageCount] = useState(1);\n  // const addSvgRef = (ref, i) => {\n  //   divRefs.current[i] = ref;\n  //   appendSvgForPage(i);\n  // };\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.layoutChantLines(ctxt, width);\n    if (height > 0) {\n      score.paginate(height);\n      // setPageCount(score.pages.length);\n    }\n    setRenderCount((count) => count + 1);\n    onRender?.();\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n    onRender,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    supertitle,\n    title,\n    subtitle,\n    textLeft,\n    textRight,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    width,\n    height,\n    handleScoreUpdate,\n  ]);\n\n  // selection:\n  useEffect(() => {\n    let newSelection: exsurge.Selection = {};\n    if (elementSelection) newSelection.element = elementSelection;\n    score.updateSelection(newSelection);\n    setRenderCount((count) => count + 1);\n  }, [score, ctxt, elementSelection]);\n\n  const divs = (score.pages || []).map((page, i) => (\n    <div\n      key={i}\n      id={id && id + \"-\" + i}\n      className={`Exsurge ${className || \"\"}`}\n      style={style}\n      onKeyDown={onKeyDown}\n    >\n      {createReactSvg(addSvgClass(page.createSvgTree(ctxt, zoom)))}\n    </div>\n  ));\n\n  return <>{divs}</>;\n};\n\nexport default Exsurge;\nexport * from \"exsurge\";\n"],"file":"Exsurge.js"}