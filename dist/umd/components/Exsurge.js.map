{"version":3,"sources":["../../../src/components/Exsurge.tsx"],"names":["useDropCap","annotation","contentEditable","alignment","width","height","zoom","id","style","className","svgClass","supertitle","title","subtitle","textLeft","textRight","defaultFont","defaultColor","defaultTitleAlignment","font","baseFontSize","staffSize","interSyllabicSpacing","spaceBetweenSystems","spaceAboveLyrics","createReactSvg","svgTree","React","Exsurge","textStyles","mapAnnotationSpansToTextLeft","addSvgClass","useMemo","node","props","propKey","classNamePrefix","supertitleSize","titleSize","subtitleSize","leftRightSize","annotationArray","useArray","textFontsArray","textSizesArray","textColorsArray","titleAlignmentsArray","useState","ctxtRef","headerLenRef","useRef","ctxt","exsurge","defaultSpecialCharText","char","useEffect","handleScoreUpdate","useCallback","onScoreUpdate","scoreRef","score","getScore","process","loadedFontsRef","loadedFonts","fontsUsedButNotLoaded","getNotYetLoadedFonts","families","Array","setFontLoaded","WebFont","google","classes","fontactive","fvd","fontinactive","resolveLocalFont","newFont","resolveFont","interSyllabicMultiplier","Object","key","textStyle","textType","insertion","selection","selectionInsertion","previousSelectionInsertion","usePrevious","elementSelection","setRenderCount","count","onRender","newSelection","divs","onKeyDown","page"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport WebFont from \"webfontloader\";\nimport * as exsurge from \"exsurge\";\nimport { SvgTreeNode } from \"exsurge\";\nimport { TextTypesOptions } from \"../interfaces/TextTypeOptions\";\nimport { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport useArray from \"../hooks/useArray\";\nimport getNotYetLoadedFonts from \"../utils/getNotYetLoadedFonts\";\nimport resolveFont from \"../utils/resolveFont\";\n\nexport interface SharedExsurgeProps {\n  useDropCap?: boolean;\n  annotation?: string | string[];\n  contentEditable?: boolean;\n  alignment?: \"english\" | \"latin\";\n  width?: number;\n  height?: number;\n  zoom?: number;\n  selection?: exsurge.Selection;\n\n  id?: string;\n  style?: any;\n  className?: string;\n  svgClass?: string;\n\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  textLeft?: string;\n  textRight?: string;\n\n  defaultFont?: string;\n  defaultColor?: string;\n  defaultTitleAlignment?: string;\n\n  font?: string;\n  baseFontSize?: number;\n  staffSize?: number;\n  interSyllabicSpacing?: number;\n  spaceBetweenSystems?: number;\n  spaceAboveLyrics?: number;\n\n  textStyles?: TextTypesOptions;\n\n  onScoreUpdate?(score: exsurge.ChantScore, gabceHeaderLen: number): any;\n  onRender?: () => void;\n  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): any;\n  mapAnnotationSpansToTextLeft?: exsurge.AnnotationSpansToTextLeftMapper;\n}\n\nconst createReactSvg = (\n  svgTree: exsurge.SvgTreeNode | string\n): React.ReactElement | string =>\n  typeof svgTree === \"string\"\n    ? svgTree\n    : React.createElement(\n        svgTree.name || React.Fragment,\n        svgTree.props,\n        ...(svgTree.children || []).map(createReactSvg)\n      );\n\nexport interface ExsurgeProps extends SharedExsurgeProps {\n  gabc: string;\n}\n\nconst Exsurge: React.FC<ExsurgeProps> = ({\n  gabc,\n  useDropCap = true,\n  annotation = [],\n  contentEditable = false,\n  alignment = \"latin\",\n  width = -1,\n  height = -1,\n  zoom,\n  selection,\n\n  id,\n  style,\n  className,\n  svgClass,\n\n  supertitle,\n  title,\n  subtitle,\n  textLeft,\n  textRight,\n\n  defaultFont = \"EB Garamond\",\n  defaultColor = \"#000000\",\n  defaultTitleAlignment = \"center\",\n\n  font,\n  staffSize = 37.5,\n  baseFontSize = (staffSize * 19.2) / 37.5,\n  interSyllabicSpacing = 2.5,\n  spaceBetweenSystems = 1.5,\n  spaceAboveLyrics = 0.75,\n\n  textStyles = {},\n\n  onScoreUpdate,\n  onRender,\n  onKeyDown,\n  mapAnnotationSpansToTextLeft,\n}: ExsurgeProps) => {\n  const addSvgClass = useMemo(\n    () =>\n      svgClass\n        ? (node: SvgTreeNode) => {\n            const props = node.props || (node.props = {});\n            const propKey = 'class' in props ? 'class' : 'className';\n            const classNamePrefix = props[propKey]\n              ? props[propKey] + \" \"\n              : \"\";\n            props[propKey] = classNamePrefix + svgClass;\n            return node;\n          }\n        : (node: SvgTreeNode) => node,\n    [svgClass]\n  );\n\n  const supertitleSize = textStyles.supertitle?.size;\n  const titleSize = textStyles.title?.size;\n  const subtitleSize = textStyles.subtitle?.size;\n  const leftRightSize = textStyles.leftRight?.size;\n\n  const annotationArray = useArray(\n    annotation instanceof Array ? annotation : [annotation]\n  );\n  const textFontsArray = useArray([\n    textStyles.supertitle?.font,\n    textStyles.title?.font,\n    textStyles.subtitle?.font,\n    textStyles.leftRight?.font,\n    textStyles.annotation?.font,\n    textStyles.dropCap?.font,\n    textStyles.al?.font,\n    textStyles.choralSign?.font,\n    textStyles.lyric?.font,\n    textStyles.translation?.font,\n    font,\n    defaultFont,\n  ]);\n  const textSizesArray = useArray([\n    textStyles.supertitle?.size,\n    textStyles.title?.size,\n    textStyles.subtitle?.size,\n    textStyles.leftRight?.size,\n    textStyles.annotation?.size,\n    textStyles.dropCap?.size,\n    textStyles.al?.size,\n    textStyles.choralSign?.size,\n    textStyles.lyric?.size,\n    textStyles.translation?.size,\n  ]);\n  const textColorsArray = useArray([\n    textStyles.supertitle?.color,\n    textStyles.title?.color,\n    textStyles.subtitle?.color,\n    textStyles.leftRight?.color,\n    textStyles.annotation?.color,\n    textStyles.dropCap?.color,\n    textStyles.al?.color,\n    textStyles.choralSign?.color,\n    textStyles.lyric?.color,\n    textStyles.translation?.color,\n  ]);\n  const titleAlignmentsArray = useArray([\n    textStyles.supertitle?.alignment,\n    textStyles.title?.alignment,\n    textStyles.subtitle?.alignment,\n  ]);\n\n  const [, setRenderCount] = useState(0);\n  const ctxtRef: React.MutableRefObject<\n    exsurge.ChantContext | undefined\n  > = useRef();\n  const headerLenRef = useRef(0);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!ctxtRef.current) {\n    let ctxt = (ctxtRef.current = new exsurge.ChantContext(\n      exsurge.TextMeasuringStrategy.Canvas\n    ));\n\n    ctxt.specialCharProperties[\"font-family\"] = `Versiculum`;\n    ctxt.specialCharProperties[\"font-variant\"] = \"normal\";\n    ctxt.specialCharProperties[\"font-weight\"] = \"400\";\n    const defaultSpecialCharText = ctxt.specialCharText || ((char: string) => char);\n    ctxt.specialCharText = (char) => defaultSpecialCharText(char).toLowerCase();\n    ctxt.textAfterSpecialChar = \"\";\n    ctxt.autoColor = false;\n    ctxt.setRubricColor(\"\");\n    ctxt.minSpaceAboveStaff = 0;\n\n    ctxt.editable = !!contentEditable;\n\n    ctxt.useExtraTextOnly = !contentEditable;\n\n  }\n\n  const ctxt: exsurge.ChantContext = ctxtRef.current;\n  useEffect(() => {\n    if (typeof mapAnnotationSpansToTextLeft === 'function') {\n      ctxt.mapAnnotationSpansToTextLeft = mapAnnotationSpansToTextLeft;\n    }\n  }, [ctxt, mapAnnotationSpansToTextLeft])\n\n  const handleScoreUpdate = useCallback(\n    (score, gabcHeaderLen) => onScoreUpdate?.(score, gabcHeaderLen),\n    [onScoreUpdate]\n  );\n  const scoreRef: React.MutableRefObject<\n    exsurge.ChantScore | undefined\n  > = useRef();\n  function getScore() {\n    if (!scoreRef.current) scoreRef.current = new exsurge.ChantScore(ctxt);\n    return scoreRef.current;\n  }\n\n  const score = getScore();\n  if (process.env.NODE_ENV === \"development\") {\n    // DEBUG: window.$score = score;\n  }\n\n  // load font.  Right now we use Google, but webfontloader supports\n  // • edgewebfonts.adobe.com\n  // • Fontdeck.com\n  // • Fonts.com\n  // • Typekit.com\n  const loadedFontsRef: React.MutableRefObject<LoadedFontsDictionary> = useRef(\n    {}\n  );\n  useEffect(() => {\n    // TODO...keep track of whether Bold, Italic, etc. are needed, and load them as necessary\n\n    // first calculate which distinct fonts we need:\n    const loadedFonts = loadedFontsRef.current,\n      fontsUsedButNotLoaded = new Set(\n        getNotYetLoadedFonts(textFontsArray, loadedFonts)\n      ),\n      families = Array.from(fontsUsedButNotLoaded).map(\n        (font) => `${font}:400,400i,700,700i`\n      );\n    if (families.length) {\n      setFontLoaded(false);\n      WebFont.load({\n        google: {\n          families,\n        },\n        classes: false,\n        fontactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = true;\n            if (getNotYetLoadedFonts(textFontsArray, loadedFonts).length === 0)\n              // all required fonts have been loaded:\n              setFontLoaded(true);\n          }\n        },\n        fontinactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = false;\n          }\n        },\n      });\n    }\n  }, [textFontsArray]);\n\n  const resolveLocalFont = useCallback(\n    (newFont?: string) =>\n      resolveFont(loadedFontsRef.current, newFont, font, defaultFont),\n    [font, defaultFont]\n  );\n\n  // Set fonts, sizes, and colors:\n  useEffect(() => {\n    // don't set the fonts if they haven't yet loaded:\n    if (getNotYetLoadedFonts(textFontsArray, loadedFontsRef.current).length > 0)\n      return;\n    const interSyllabicMultiplier = interSyllabicSpacing;\n    ctxt.setStaffHeight(staffSize);\n    ctxt.interSyllabicMultiplier = interSyllabicMultiplier;\n    ctxt.interVerbalMultiplier = interSyllabicMultiplier * 0.25;\n    ctxt.spaceBetweenSystems = spaceBetweenSystems;\n    ctxt.minSpaceBelowStaff = spaceAboveLyrics;\n    ctxt.setFont(resolveLocalFont(textStyles.lyric?.font), baseFontSize);\n    for (let [k, textType] of Object.entries(exsurge.TextTypes)) {\n      // Is there a better way to do type assertion than this?\n      let key = k as keyof exsurge.TextTypes;\n      const textStyle = textStyles[key] || {};\n      // font\n      ctxt.textStyles[key].font = resolveLocalFont(textStyle.font);\n      // size\n      if (textType.defaultSize && textStyle.size !== undefined) {\n        ctxt.textStyles[key].size = textType.defaultSize(\n          textStyle.size * baseFontSize\n        );\n      }\n      // color\n      ctxt.textStyles[key].color = textStyle.color || defaultColor;\n      // alignment\n      switch (key) {\n        case \"supertitle\":\n        case \"title\":\n        case \"subtitle\":\n          ctxt.textStyles[key].alignment =\n            textStyle?.alignment || defaultTitleAlignment;\n          break;\n        // TODO: allow padding to be changed? on dropCap and annotation\n      }\n    }\n    ctxt.defaultLanguage = exsurge.language[alignment];\n    score.forceLayout = true;\n    // eslint-disable-next-line\n  }, [\n    fontLoaded,\n    font,\n    defaultFont,\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n\n    textSizesArray,\n    textFontsArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    ctxt,\n    score,\n  ]);\n\n  useEffect(() => {\n    score.useDropCap = useDropCap;\n    score.recreateDropCap(ctxt);\n    score.forceLayout = true;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [useDropCap, score, ctxt, handleScoreUpdate]);\n\n  const insertion =\n    selection && selection.element && selection.element.insertion;\n  const selectionInsertion = insertion\n    ? typeof insertion.afterElementIndex === \"number\"\n      ? insertion.afterElementIndex\n      : -1 - (insertion.chantLine || -1)\n    : undefined;\n  const previousSelectionInsertion = usePrevious(selectionInsertion);\n  const elementSelection = (selection && selection.element) || null;\n  useEffect(() => {\n    headerLenRef.current = exsurge.Gabc.updateMappingsFromSource(\n      ctxt,\n      score.mappings,\n      gabc,\n      selectionInsertion,\n      previousSelectionInsertion\n    );\n    score.updateNotations(ctxt);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [gabc, selectionInsertion, ctxt, score, handleScoreUpdate]);\n\n  useEffect(() => {\n    score.annotation = annotationArray.length\n      ? new exsurge.Annotations(ctxt, ...annotationArray)\n      : null;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [annotationArray, ctxt, score, handleScoreUpdate]);\n\n  // title effects:\n  useEffect(() => {\n    score.titles.setSupertitle(ctxt, supertitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, supertitle, supertitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTitle(ctxt, title);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, title, titleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setSubtitle(ctxt, subtitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, subtitle, subtitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextLeft(ctxt, textLeft);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textLeft, leftRightSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextRight(ctxt, textRight);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textRight, leftRightSize, handleScoreUpdate]);\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.performLayout(ctxt, score.forceLayout);\n    score.forceLayout = false;\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    handleScoreUpdate,\n  ]);\n\n  // const appendSvgForPage = useCallback(pageI => {\n  //   const svgParent = divRefs.current[pageI];\n  //   while (svgParent && svgParent.firstChild)\n  //     svgParent.removeChild(svgParent.firstChild);\n  //   let svg = svgRefs.current[pageI];\n  //   if (svgParent && svg) svgParent.appendChild(svg);\n  // }, []);\n\n  // const divRefs = useRef([]),\n  //   svgRefs = useRef([]);\n  // const [pageCount, setPageCount] = useState(1);\n  // const addSvgRef = (ref, i) => {\n  //   divRefs.current[i] = ref;\n  //   appendSvgForPage(i);\n  // };\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.layoutChantLines(ctxt, width);\n    if (height > 0) {\n      score.paginate(height);\n      // setPageCount(score.pages.length);\n    }\n    setRenderCount((count) => count + 1);\n    onRender?.();\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n    onRender,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    supertitle,\n    title,\n    subtitle,\n    textLeft,\n    textRight,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    width,\n    height,\n    handleScoreUpdate,\n  ]);\n\n  // selection:\n  useEffect(() => {\n    let newSelection: exsurge.Selection = {};\n    if (elementSelection) newSelection.element = elementSelection;\n    score.updateSelection(newSelection);\n    setRenderCount((count) => count + 1);\n  }, [score, ctxt, elementSelection]);\n\n  const divs = (score.pages || []).map((page, i) => (\n    <div\n      key={i}\n      id={id && id + \"-\" + i}\n      className={`Exsurge ${className || \"\"}`}\n      style={style}\n      onKeyDown={onKeyDown}\n    >\n      {createReactSvg(addSvgClass(page.createSvgTree(ctxt, zoom)))}\n    </div>\n  ));\n\n  return <>{divs}</>;\n};\n\nexport default Exsurge;\nexport * from \"exsurge\";\n"],"file":"Exsurge.js"}