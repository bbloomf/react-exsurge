{"version":3,"sources":["../../../src/hooks/useGabcMerge.tsx"],"names":["useGabcMerge","useLargeInitial","notation","normalizeInputs","notationNodes","splitInputs","sylNdx","isFirstSyl","result","isFirstSyllable","mapSyllable","syllables","regexClef","regexNonSyllabicGabc","regexFindParensWithLeadSpaces","regexFindParens","text","syl","stripParens","s","getSyllable","getNonSyllable","syllable","noSyllable","nextSyllable","capitalizeInitial","nextIndex"],"mappings":"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","sourcesContent":["    export const useGabcMerge = (syllabifiedText: string, musicalNotation: string, useLargeInitial: boolean = true) => {\n\n      const { text, notation } = normalizeInputs(syllabifiedText, musicalNotation);\n\n      if (!notation) return text;\n\n      const { syllables, notationNodes } = splitInputs(text, notation);\n\n      let sylNdx = 0\n      let isFirstSyl = true;\n      let result = notationNodes\n        .map((notation) => {\n          const { syllable, nextIndex, isFirstSyllable } = mapSyllable(notation, syllables, sylNdx, isFirstSyl);\n          sylNdx = nextIndex;\n          isFirstSyl = isFirstSyllable;\n          return syllable;\n        })\n        .join('')\n        .trim()\n      ;\n\n      // add any additional syllables that come after the last notation data:\n      while (sylNdx < syllables.length) {\n        result +=\n          syllables[sylNdx++].replace(/^(\\s*)\"?\\(?(.*?)\\)?\"?$/, '$1$2') + '()';\n      }\n      return result;\n    }\n\n    /*-----  REGEX DEFS  -----*/\n    const regexClef = /^[cf]b?[1-4]$/;\n    const regexNonSyllabicGabc = /^([cf]b?[1-4]|[,;:`]+|[a-m]\\+|[zZ]0?)+$/;\n    const regexFindParensWithLeadSpaces = /^(\\s*)\\((.*)\\)$/;\n    const regexFindParens = /^\\((.*)\\)$/;\n\n    /*-----  NORMALIZATION FUNCTIONS  -----*/\n    const normalizeInputs = (text: string, notation: string): { text: string, notation: string } => {\n      // normalize the text, getting rid of multiple consecutive whitespace,\n      // and handling lilypond's \\forceHyphen directive\n      \n      // remove flex and mediant symbols if accents are marked with pipes:\n      if (/\\|/.test(text)) {\n        text = text.replace(/[†*]/g, \"\");\n      }\n      text = text\n        .replace(/%[^\\n]*(\\n|$)/g, '$1')\n        .replace(/\\s*\\n\\s*/g, '\\n')\n        .replace(/(\\s)\\s+/g, '$1')\n        .replace(/\\\\forceHyphen\\s+(\\S+)\\s+--\\s+/g, '$1-')\n        .replace(/\\|([^|]+)\\|/g, '+$1+')\n        .replace(/([ -])\\+|\\+(\\W*(?:[-\\s]|$))/g, '$1$2')\n        .trim()\n      ;\n\n      notation = notation.replace(/%[^\\n]*(\\n|$)/g, '$1').trim();\n\n      return { text, notation }\n    }\n\n    const splitInputs = (text: string, notation: string): { syllables: string[], notationNodes: string[] } => {\n      const syllables = text\n      .split(/\\s+--\\s+|\\+|(\\s*\\(?\"[^\"]+\"\\)?-?)|(\\s*[^\\s-+]+-)(?=[^\\s-])|(?=\\s)/)\n        .filter((syl) => syl && syl.trim());\n\n      const notationNodes = notation.split(/\\s+/);\n\n      return { syllables, notationNodes };\n    }\n\n    /*-----  STRING UTIL FUNCTIONS  -----*/\n    const stripParens = (s: string) => {\n      return s.replace(regexFindParensWithLeadSpaces, '$1$2')\n          s.replace(regexFindParens, '$1')\n      ;\n    }\n\n    /*-----  GETTER FUNCTIONS  -----*/\n    const getSyllable = (syllables: string[], index: number) => {\n      return (syllables[index] || ' ').replace(/^(\\s*)\"(.*)\"$/, '$1$2');\n    }\n\n    const getNonSyllable = (syllables: string[], syllableNdx: number, notation: string): string => {\n      let syllable = syllables[syllableNdx];\n\n      if (/^(\\s*!|[^a-záéíóúýàèìòùäëïöüÿæœǽœ́]+$|\\s*\\(.*\\)$|\\s*\"\\(.*\\)\"$)/i.test(syllable)\n          && !regexClef.test(notation)) {\n\n        return syllable.replace(/^(\\s*)!/, '$1')\n            .replace(/^(\\s*)\"?\\((.*?)\\)\"?$/, '$1$2')\n        ;\n      }\n\n      return ' ';\n    }\n\n    /*-----  PROCESSOR FUNCTIONS  -----*/\n    const mapSyllable = (\n      notation: string,\n      syllables: string[],\n      sylNdx: number,\n      isFirstSyllable: boolean\n    ): { syllable: string, nextIndex: number, isFirstSyllable: boolean } => {\n      const noSyllable = regexNonSyllabicGabc.test(notation) || /^\\(.*\\)$/.test(notation);\n      notation = stripParens(notation);\n\n      let syllable = noSyllable ? getNonSyllable(syllables, sylNdx, notation) : getSyllable(syllables, sylNdx++);\n      if (!noSyllable) {\n        let nextSyllable = syllable;\n        syllable = stripParens(syllable);\n\n        while (/^\\s*\\(.*\\)$/.test(nextSyllable)) {\n          if (/^\".*\"$/.test(syllable)) {\n            syllable = syllable.slice(1, -1);\n          }\n\n          nextSyllable = getSyllable(syllables, sylNdx++);\n          syllable += '()' + stripParens(nextSyllable);\n        }\n\n        if (isFirstSyllable) {\n          isFirstSyllable = false;\n\n          syllable = capitalizeInitial(syllable, syllables[sylNdx]);\n        }\n      }\n\n      syllable = syllable + '(' + notation + ')';\n\n      return { syllable, nextIndex: sylNdx, isFirstSyllable }\n    }\n\n    const capitalizeInitial = (syllable: string, nextSyllable: string): string => {\n      if (/^\\s*[a-záéíóúýàèìòùäëïöüÿæœǽœ́]+/i.test(syllable)) {\n        // special capitalization rules for the large initial:\n        // the second letter should also be capitalized, and the third as well,\n        // if it is a three letter word\n        syllable = syllable.slice(0, 2).toUpperCase() + syllable.slice(2).toLowerCase();\n        if (syllable.length === 3 && /^\\s/.test(nextSyllable)) {\n          syllable = syllable.toUpperCase();\n        }\n      }\n\n      return syllable;\n    }\n"],"file":"useGabcMerge.js"}