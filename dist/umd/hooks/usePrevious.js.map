{"version":3,"sources":["../../../src/hooks/usePrevious.tsx"],"names":["usePrevious","value","ref","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,QAAMA,WAAW,GAAIC,KAAD,IAAmD;AACrE;AACA;AACA,UAAMC,GAAG,GAH4D,oBAGrE,CAHqE,CAKrE;;AACAC,0BAAU,MAAM;AACdD,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADO,KAATC,EAEG,CARkE,KAQlE,CAFHA,EANqE,CAQxD;AAEb;;AACA,WAAOD,GAAG,CAAV,OAAA;AAXF,GAAA;;oBAcA,W","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst usePrevious = (value: number | undefined): number | undefined => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<number | undefined>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n};\n\nexport default usePrevious;\n"],"file":"usePrevious.js"}