{"version":3,"sources":["../../../src/hooks/usePrevious.tsx"],"names":["useRef","useEffect","usePrevious","value","ref","current"],"mappings":"AAAA,gBAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAmD;AACrE;AACA;AACA,QAAMC,GAAG,GAAGJ,MAAM,EAAlB,CAHqE,CAKrE;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CANqE,CAQxD;AAEb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACD,CAZD;;AAcA,eAAeH,WAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst usePrevious = (value: number | undefined): number | undefined => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<number | undefined>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n};\n\nexport default usePrevious;\n"],"file":"usePrevious.js"}