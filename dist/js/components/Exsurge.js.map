{"version":3,"sources":["../../../src/components/Exsurge.tsx"],"names":["Exsurge","gabc","useDropCap","annotation","contentEditable","alignment","width","height","zoom","selection","id","style","className","supertitle","title","subtitle","textLeft","textRight","defaultFont","defaultColor","defaultTitleAlignment","font","staffSize","baseFontSize","interSyllabicSpacing","spaceBetweenSystems","spaceAboveLyrics","textStyles","onScoreUpdate","onKeyDown","supertitleSize","size","titleSize","subtitleSize","leftRightSize","leftRight","annotationArray","Array","textFontsArray","dropCap","al","choralSign","lyric","translation","textSizesArray","textColorsArray","color","titleAlignmentsArray","setRenderCount","ctxtRef","headerLenRef","fontLoaded","setFontLoaded","current","ctxt","exsurge","ChantContext","TextMeasuringStrategy","Canvas","specialCharProperties","specialCharText","char","toLowerCase","textAfterSpecialChar","setRubricColor","minSpaceAboveStaff","editable","useExtraTextOnly","handleScoreUpdate","score","gabcHeaderLen","scoreRef","getScore","ChantScore","process","env","NODE_ENV","loadedFontsRef","loadedFonts","fontsUsedButNotLoaded","Set","families","from","map","length","WebFont","load","google","classes","fontactive","familyName","fvd","fontinactive","resolveLocalFont","newFont","interSyllabicMultiplier","setStaffHeight","interVerbalMultiplier","minSpaceBelowStaff","setFont","Object","entries","TextTypes","k","textType","key","textStyle","defaultSize","undefined","defaultLanguage","language","forceLayout","recreateDropCap","insertion","element","selectionInsertion","afterElementIndex","chantLine","previousSelectionInsertion","elementSelection","Gabc","updateMappingsFromSource","mappings","updateNotations","Annotations","titles","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","performLayout","layoutChantLines","paginate","count","newSelection","updateSelection","createReactSvg","svgTree","React","createElement","name","Fragment","props","children","divs","pages","page","i","createSvgTree"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport WebFont from \"webfontloader\";\nimport * as exsurge from \"exsurge\";\nimport { TextTypesOptions } from \"../interfaces/TextTypeOptions\";\nimport { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport useArray from \"../hooks/useArray\";\nimport getNotYetLoadedFonts from \"../utils/getNotYetLoadedFonts\";\nimport resolveFont from \"../utils/resolveFont\";\n\ninterface ExsurgeProps {\n  gabc: string;\n  useDropCap?: boolean;\n  annotation?: string | string[];\n  contentEditable?: boolean;\n  alignment?: \"english\" | \"latin\";\n  width?: number;\n  height?: number;\n  zoom?: number;\n  selection?: exsurge.Selection;\n\n  id?: string;\n  style?: any;\n  className?: string;\n\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  textLeft?: string;\n  textRight?: string;\n\n  defaultFont?: string;\n  defaultColor?: string;\n  defaultTitleAlignment?: string;\n\n  font?: string;\n  baseFontSize?: number;\n  staffSize?: number;\n  interSyllabicSpacing?: number;\n  spaceBetweenSystems?: number;\n  spaceAboveLyrics?: number;\n\n  textStyles?: TextTypesOptions;\n\n  onScoreUpdate?(score: exsurge.ChantScore, gabceHeaderLen: number): any;\n  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): any;\n}\n\nconst Exsurge: React.FC<ExsurgeProps> = ({\n  gabc,\n  useDropCap = true,\n  annotation = [],\n  contentEditable = false,\n  alignment = \"latin\",\n  width = -1,\n  height = -1,\n  zoom,\n  selection,\n\n  id,\n  style,\n  className,\n\n  supertitle,\n  title,\n  subtitle,\n  textLeft,\n  textRight,\n\n  defaultFont = \"EB Garamond\",\n  defaultColor = \"#000000\",\n  defaultTitleAlignment = \"center\",\n\n  font,\n  staffSize = 37.5,\n  baseFontSize = (staffSize * 19.2) / 37.5,\n  interSyllabicSpacing = 2.5,\n  spaceBetweenSystems = 1.5,\n  spaceAboveLyrics = 0.75,\n\n  textStyles = {},\n\n  onScoreUpdate,\n  onKeyDown,\n}: ExsurgeProps) => {\n  const supertitleSize = textStyles.supertitle?.size;\n  const titleSize = textStyles.title?.size;\n  const subtitleSize = textStyles.subtitle?.size;\n  const leftRightSize = textStyles.leftRight?.size;\n\n  const annotationArray = useArray(\n    annotation instanceof Array ? annotation : [annotation]\n  );\n  const textFontsArray = useArray([\n    textStyles.supertitle?.font,\n    textStyles.title?.font,\n    textStyles.subtitle?.font,\n    textStyles.leftRight?.font,\n    textStyles.annotation?.font,\n    textStyles.dropCap?.font,\n    textStyles.al?.font,\n    textStyles.choralSign?.font,\n    textStyles.lyric?.font,\n    textStyles.translation?.font,\n    font,\n    defaultFont,\n  ]);\n  const textSizesArray = useArray([\n    textStyles.supertitle?.size,\n    textStyles.title?.size,\n    textStyles.subtitle?.size,\n    textStyles.leftRight?.size,\n    textStyles.annotation?.size,\n    textStyles.dropCap?.size,\n    textStyles.al?.size,\n    textStyles.choralSign?.size,\n    textStyles.lyric?.size,\n    textStyles.translation?.size,\n  ]);\n  const textColorsArray = useArray([\n    textStyles.supertitle?.color,\n    textStyles.title?.color,\n    textStyles.subtitle?.color,\n    textStyles.leftRight?.color,\n    textStyles.annotation?.color,\n    textStyles.dropCap?.color,\n    textStyles.al?.color,\n    textStyles.choralSign?.color,\n    textStyles.lyric?.color,\n    textStyles.translation?.color,\n  ]);\n  const titleAlignmentsArray = useArray([\n    textStyles.supertitle?.alignment,\n    textStyles.title?.alignment,\n    textStyles.subtitle?.alignment,\n  ]);\n\n  const [, setRenderCount] = useState(0);\n  const ctxtRef: React.MutableRefObject<\n    exsurge.ChantContext | undefined\n  > = useRef();\n  const headerLenRef = useRef(0);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!ctxtRef.current) {\n    let ctxt = (ctxtRef.current = new exsurge.ChantContext(\n      exsurge.TextMeasuringStrategy.Canvas\n    ));\n\n    ctxt.specialCharProperties[\"font-family\"] = `Versiculum`;\n    ctxt.specialCharProperties[\"font-variant\"] = \"normal\";\n    ctxt.specialCharProperties[\"font-size\"] = \"120%\";\n    ctxt.specialCharProperties[\"font-weight\"] = \"400\";\n    ctxt.specialCharText = (char) => char.toLowerCase();\n    ctxt.textAfterSpecialChar = \"\";\n    ctxt.setRubricColor(\"#d00\");\n    ctxt.minSpaceAboveStaff = 0;\n\n    ctxt.editable = !!contentEditable;\n\n    ctxt.useExtraTextOnly = !contentEditable;\n  }\n\n  const ctxt: exsurge.ChantContext = ctxtRef.current;\n  const handleScoreUpdate = useCallback(\n    (score, gabcHeaderLen) => {\n      if (typeof onScoreUpdate === \"function\")\n        onScoreUpdate(score, gabcHeaderLen);\n    },\n    [onScoreUpdate]\n  );\n  const scoreRef: React.MutableRefObject<\n    exsurge.ChantScore | undefined\n  > = useRef();\n  function getScore() {\n    if (!scoreRef.current) scoreRef.current = new exsurge.ChantScore(ctxt);\n    return scoreRef.current;\n  }\n\n  const score = getScore();\n  if (process.env.NODE_ENV === \"development\") {\n    // DEBUG: window.$score = score;\n  }\n\n  // load font.  Right now we use Google, but webfontloader supports\n  // • edgewebfonts.adobe.com\n  // • Fontdeck.com\n  // • Fonts.com\n  // • Typekit.com\n  const loadedFontsRef: React.MutableRefObject<LoadedFontsDictionary> = useRef(\n    {}\n  );\n  useEffect(() => {\n    // TODO...keep track of whether Bold, Italic, etc. are needed, and load them as necessary\n\n    // first calculate which distinct fonts we need:\n    const loadedFonts = loadedFontsRef.current,\n      fontsUsedButNotLoaded = new Set(\n        getNotYetLoadedFonts(textFontsArray, loadedFonts)\n      ),\n      families = Array.from(fontsUsedButNotLoaded).map(\n        (font) => `${font}:400,400i,700,700i`\n      );\n    if (families.length) {\n      setFontLoaded(false);\n      WebFont.load({\n        google: {\n          families,\n        },\n        classes: false,\n        fontactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = true;\n            if (getNotYetLoadedFonts(textFontsArray, loadedFonts).length === 0)\n              // all required fonts have been loaded:\n              setFontLoaded(true);\n          }\n        },\n        fontinactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = false;\n          }\n        },\n      });\n    }\n  }, [textFontsArray]);\n\n  const resolveLocalFont = useCallback(\n    (newFont?: string) =>\n      resolveFont(loadedFontsRef.current, newFont, font, defaultFont),\n    [font, defaultFont]\n  );\n\n  // Set fonts, sizes, and colors:\n  useEffect(() => {\n    // don't set the fonts if they haven't yet loaded:\n    if (getNotYetLoadedFonts(textFontsArray, loadedFontsRef.current).length > 0)\n      return;\n    const interSyllabicMultiplier = interSyllabicSpacing;\n    ctxt.setStaffHeight(staffSize);\n    ctxt.interSyllabicMultiplier = interSyllabicMultiplier;\n    ctxt.interVerbalMultiplier = interSyllabicMultiplier * 0.25;\n    ctxt.spaceBetweenSystems = spaceBetweenSystems;\n    ctxt.minSpaceBelowStaff = spaceAboveLyrics;\n    ctxt.setFont(resolveLocalFont(textStyles.lyric?.font), baseFontSize);\n    for (let [k, textType] of Object.entries(exsurge.TextTypes)) {\n      // Is there a better way to do type assertion than this?\n      let key = k as keyof exsurge.TextTypes;\n      const textStyle = textStyles[key] || {};\n      // font\n      ctxt.textStyles[key].font = resolveLocalFont(textStyle.font);\n      // size\n      if (textType.defaultSize && textStyle.size !== undefined) {\n        ctxt.textStyles[key].size = textType.defaultSize(\n          textStyle.size * baseFontSize\n        );\n      }\n      // color\n      ctxt.textStyles[key].color = textStyle.color || defaultColor;\n      // alignment\n      switch (key) {\n        case \"supertitle\":\n        case \"title\":\n        case \"subtitle\":\n          ctxt.textStyles[key].alignment =\n            textStyle?.alignment || defaultTitleAlignment;\n          break;\n        // TODO: allow padding to be changed? on dropCap and annotation\n      }\n    }\n    ctxt.defaultLanguage = exsurge.language[alignment];\n    score.forceLayout = true;\n    // eslint-disable-next-line\n  }, [\n    fontLoaded,\n    font,\n    defaultFont,\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n\n    textSizesArray,\n    textFontsArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    ctxt,\n    score,\n  ]);\n\n  useEffect(() => {\n    score.useDropCap = useDropCap;\n    score.recreateDropCap(ctxt);\n    score.forceLayout = true;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [useDropCap, score, ctxt, handleScoreUpdate]);\n\n  const insertion =\n    selection && selection.element && selection.element.insertion;\n  const selectionInsertion = insertion\n    ? typeof insertion.afterElementIndex === \"number\"\n      ? insertion.afterElementIndex\n      : -1 - (insertion.chantLine || -1)\n    : undefined;\n  const previousSelectionInsertion = usePrevious(selectionInsertion);\n  const elementSelection = (selection && selection.element) || null;\n  useEffect(() => {\n    headerLenRef.current = exsurge.Gabc.updateMappingsFromSource(\n      ctxt,\n      score.mappings,\n      gabc,\n      selectionInsertion,\n      previousSelectionInsertion\n    );\n    score.updateNotations(ctxt);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [gabc, selectionInsertion, ctxt, score, handleScoreUpdate]);\n\n  useEffect(() => {\n    score.annotation = annotationArray.length\n      ? new exsurge.Annotations(ctxt, ...annotationArray)\n      : null;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [annotationArray, ctxt, score, handleScoreUpdate]);\n\n  // title effects:\n  useEffect(() => {\n    score.titles.setSupertitle(ctxt, supertitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, supertitle, supertitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTitle(ctxt, title);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, title, titleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setSubtitle(ctxt, subtitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, subtitle, subtitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextLeft(ctxt, textLeft);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textLeft, leftRightSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextRight(ctxt, textRight);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textRight, leftRightSize, handleScoreUpdate]);\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.performLayout(ctxt, score.forceLayout);\n    score.forceLayout = false;\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    handleScoreUpdate,\n  ]);\n\n  // const appendSvgForPage = useCallback(pageI => {\n  //   const svgParent = divRefs.current[pageI];\n  //   while (svgParent && svgParent.firstChild)\n  //     svgParent.removeChild(svgParent.firstChild);\n  //   let svg = svgRefs.current[pageI];\n  //   if (svgParent && svg) svgParent.appendChild(svg);\n  // }, []);\n\n  // const divRefs = useRef([]),\n  //   svgRefs = useRef([]);\n  // const [pageCount, setPageCount] = useState(1);\n  // const addSvgRef = (ref, i) => {\n  //   divRefs.current[i] = ref;\n  //   appendSvgForPage(i);\n  // };\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.layoutChantLines(ctxt, width);\n    if (height > 0) {\n      score.paginate(height);\n      // setPageCount(score.pages.length);\n    }\n    setRenderCount((count) => count + 1);\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    supertitle,\n    title,\n    subtitle,\n    textLeft,\n    textRight,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    width,\n    height,\n    handleScoreUpdate,\n  ]);\n\n  // selection:\n  useEffect(() => {\n    let newSelection: exsurge.Selection = {};\n    if (elementSelection) newSelection.element = elementSelection;\n    score.updateSelection(newSelection);\n    setRenderCount((count) => count + 1);\n  }, [score, ctxt, elementSelection]);\n\n  const createReactSvg = (\n    svgTree: exsurge.SvgTreeNode | string\n  ): React.ReactElement | string =>\n    typeof svgTree === \"string\"\n      ? svgTree\n      : React.createElement(\n          svgTree.name || React.Fragment,\n          svgTree.props,\n          ...(svgTree.children || []).map(createReactSvg)\n        );\n\n  const divs = (score.pages || []).map((page, i) => (\n    <div\n      key={i}\n      id={id && id + \"-\" + i}\n      className={`Exsurge ${className || \"\"}`}\n      style={style}\n      onKeyDown={onKeyDown}\n    >\n      {createReactSvg(page.createSvgTree(ctxt, zoom))}\n    </div>\n  ));\n\n  return <>{divs}</>;\n};\n\nexport default Exsurge;\nexport * from \"exsurge\";\n"],"file":"Exsurge.js"}