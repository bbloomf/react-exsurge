{"version":3,"sources":["../../../src/hooks/useGabcMerge.tsx"],"names":["useGabcMerge","syllabifiedText","musicalNotation","useLargeInitial","text","notation","normalizeInputs","syllables","notationNodes","splitInputs","sylNdx","isFirstSyl","result","map","syllable","nextIndex","isFirstSyllable","mapSyllable","join","trim","length","replace","regexClef","regexNonSyllabicGabc","regexFindParensWithLeadSpaces","regexFindParens","test","split","filter","syl","stripParens","s","getSyllable","index","getNonSyllable","syllableNdx","noSyllable","nextSyllable","slice","capitalizeInitial","toUpperCase","toLowerCase"],"mappings":"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","sourcesContent":["    export const useGabcMerge = (syllabifiedText: string, musicalNotation: string, useLargeInitial: boolean = true) => {\n\n      const { text, notation } = normalizeInputs(syllabifiedText, musicalNotation);\n\n      if (!notation) return text;\n\n      const { syllables, notationNodes } = splitInputs(text, notation);\n\n      let sylNdx = 0\n      let isFirstSyl = true;\n      let result = notationNodes\n        .map((notation) => {\n          const { syllable, nextIndex, isFirstSyllable } = mapSyllable(notation, syllables, sylNdx, isFirstSyl);\n          sylNdx = nextIndex;\n          isFirstSyl = isFirstSyllable;\n          return syllable;\n        })\n        .join('')\n        .trim()\n      ;\n\n      // add any additional syllables that come after the last notation data:\n      while (sylNdx < syllables.length) {\n        result +=\n          syllables[sylNdx++].replace(/^(\\s*)\"?\\(?(.*?)\\)?\"?$/, '$1$2') + '()';\n      }\n      return result;\n    }\n\n    /*-----  REGEX DEFS  -----*/\n    const regexClef = /^[cf]b?[1-4]$/;\n    const regexNonSyllabicGabc = /^([cf]b?[1-4]|[,;:`]+|[a-m]\\+|[zZ]0?)+$/;\n    const regexFindParensWithLeadSpaces = /^(\\s*)\\((.*)\\)$/;\n    const regexFindParens = /^\\((.*)\\)$/;\n\n    /*-----  NORMALIZATION FUNCTIONS  -----*/\n    const normalizeInputs = (text: string, notation: string): { text: string, notation: string } => {\n      // normalize the text, getting rid of multiple consecutive whitespace,\n      // and handling lilypond's \\forceHyphen directive\n      \n      // remove flex and mediant symbols if accents are marked with pipes:\n      if (/\\|/.test(text)) {\n        text = text.replace(/[†*]/g, \"\");\n      }\n      text = text\n        .replace(/%[^\\n]*(\\n|$)/g, '$1')\n        .replace(/\\s*\\n\\s*/g, '\\n')\n        .replace(/(\\s)\\s+/g, '$1')\n        .replace(/\\\\forceHyphen\\s+(\\S+)\\s+--\\s+/g, '$1-')\n        .replace(/\\|([^|]+)\\|/g, '+$1+')\n        .replace(/([ -])\\+|\\+(\\W*(?:[-\\s]|$))/g, '$1$2')\n        .trim()\n      ;\n\n      notation = notation.replace(/%[^\\n]*(\\n|$)/g, '$1').trim();\n\n      return { text, notation }\n    }\n\n    const splitInputs = (text: string, notation: string): { syllables: string[], notationNodes: string[] } => {\n      const syllables = text\n      .split(/\\s+--\\s+|\\+|(\\s*\\(?\"[^\"]+\"\\)?-?)|(\\s*[^\\s-+]+-)(?=[^\\s-])|(?=\\s)/)\n        .filter((syl) => syl && syl.trim());\n\n      const notationNodes = notation.split(/\\s+/);\n\n      return { syllables, notationNodes };\n    }\n\n    /*-----  STRING UTIL FUNCTIONS  -----*/\n    const stripParens = (s: string) => {\n      return s.replace(regexFindParensWithLeadSpaces, '$1$2')\n          s.replace(regexFindParens, '$1')\n      ;\n    }\n\n    /*-----  GETTER FUNCTIONS  -----*/\n    const getSyllable = (syllables: string[], index: number) => {\n      return (syllables[index] || ' ').replace(/^(\\s*)\"(.*)\"$/, '$1$2');\n    }\n\n    const getNonSyllable = (syllables: string[], syllableNdx: number, notation: string): string => {\n      let syllable = syllables[syllableNdx];\n\n      if (/^(\\s*!|[^a-záéíóúýàèìòùäëïöüÿæœǽœ́]+$|\\s*\\(.*\\)$|\\s*\"\\(.*\\)\"$)/i.test(syllable)\n          && !regexClef.test(notation)) {\n\n        return syllable.replace(/^(\\s*)!/, '$1')\n            .replace(/^(\\s*)\"?\\((.*?)\\)\"?$/, '$1$2')\n        ;\n      }\n\n      return ' ';\n    }\n\n    /*-----  PROCESSOR FUNCTIONS  -----*/\n    const mapSyllable = (\n      notation: string,\n      syllables: string[],\n      sylNdx: number,\n      isFirstSyllable: boolean\n    ): { syllable: string, nextIndex: number, isFirstSyllable: boolean } => {\n      const noSyllable = regexNonSyllabicGabc.test(notation) || /^\\(.*\\)$/.test(notation);\n      notation = stripParens(notation);\n\n      let syllable = noSyllable ? getNonSyllable(syllables, sylNdx, notation) : getSyllable(syllables, sylNdx++);\n      if (!noSyllable) {\n        let nextSyllable = syllable;\n        syllable = stripParens(syllable);\n\n        while (/^\\s*\\(.*\\)$/.test(nextSyllable)) {\n          if (/^\".*\"$/.test(syllable)) {\n            syllable = syllable.slice(1, -1);\n          }\n\n          nextSyllable = getSyllable(syllables, sylNdx++);\n          syllable += '()' + stripParens(nextSyllable);\n        }\n\n        if (isFirstSyllable) {\n          isFirstSyllable = false;\n\n          syllable = capitalizeInitial(syllable, syllables[sylNdx]);\n        }\n      }\n\n      syllable = syllable + '(' + notation + ')';\n\n      return { syllable, nextIndex: sylNdx, isFirstSyllable }\n    }\n\n    const capitalizeInitial = (syllable: string, nextSyllable: string): string => {\n      if (/^\\s*[a-záéíóúýàèìòùäëïöüÿæœǽœ́]+/i.test(syllable)) {\n        // special capitalization rules for the large initial:\n        // the second letter should also be capitalized, and the third as well,\n        // if it is a three letter word\n        syllable = syllable.slice(0, 2).toUpperCase() + syllable.slice(2).toLowerCase();\n        if (syllable.length === 3 && /^\\s/.test(nextSyllable)) {\n          syllable = syllable.toUpperCase();\n        }\n      }\n\n      return syllable;\n    }\n"],"file":"useGabcMerge.js"}