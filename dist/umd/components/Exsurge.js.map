{"version":3,"sources":["../../../src/components/Exsurge.tsx"],"names":["gabc","useDropCap","annotation","contentEditable","alignment","width","height","zoom","id","style","className","supertitle","title","subtitle","textLeft","textRight","defaultFont","defaultColor","defaultTitleAlignment","font","baseFontSize","staffSize","interSyllabicSpacing","spaceBetweenSystems","spaceAboveLyrics","Exsurge","textStyles","onKeyDown","supertitleSize","titleSize","subtitleSize","leftRightSize","annotationArray","useArray","textFontsArray","textSizesArray","textColorsArray","titleAlignmentsArray","useState","ctxtRef","headerLenRef","useRef","ctxt","exsurge","char","handleScoreUpdate","useCallback","onScoreUpdate","scoreRef","score","getScore","process","loadedFontsRef","useEffect","loadedFonts","fontsUsedButNotLoaded","getNotYetLoadedFonts","families","Array","setFontLoaded","WebFont","google","classes","fontactive","fvd","fontinactive","resolveLocalFont","newFont","resolveFont","interSyllabicMultiplier","Object","key","textStyle","textType","insertion","selection","selectionInsertion","previousSelectionInsertion","usePrevious","elementSelection","setRenderCount","count","newSelection","createReactSvg","svgTree","React","divs","page"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport WebFont from \"webfontloader\";\nimport * as exsurge from \"exsurge\";\nimport { TextTypesOptions } from \"../interfaces/TextTypeOptions\";\nimport { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport useArray from \"../hooks/useArray\";\nimport getNotYetLoadedFonts from \"../utils/getNotYetLoadedFonts\";\nimport resolveFont from \"../utils/resolveFont\";\n\ninterface ExsurgeProps {\n  gabc: string;\n  useDropCap?: boolean;\n  annotation?: string | string[];\n  contentEditable?: boolean;\n  alignment?: \"english\" | \"latin\";\n  width?: number;\n  height?: number;\n  zoom?: number;\n  selection?: exsurge.Selection;\n\n  id?: string;\n  style?: any;\n  className?: string;\n\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  textLeft?: string;\n  textRight?: string;\n\n  defaultFont?: string;\n  defaultColor?: string;\n  defaultTitleAlignment?: string;\n\n  font?: string;\n  baseFontSize?: number;\n  staffSize?: number;\n  interSyllabicSpacing?: number;\n  spaceBetweenSystems?: number;\n  spaceAboveLyrics?: number;\n\n  textStyles?: TextTypesOptions;\n\n  onScoreUpdate?(score: exsurge.ChantScore, gabceHeaderLen: number): any;\n  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): any;\n}\n\nconst Exsurge: React.FC<ExsurgeProps> = ({\n  gabc,\n  useDropCap = true,\n  annotation = [],\n  contentEditable = false,\n  alignment = \"latin\",\n  width = -1,\n  height = -1,\n  zoom,\n  selection,\n\n  id,\n  style,\n  className,\n\n  supertitle,\n  title,\n  subtitle,\n  textLeft,\n  textRight,\n\n  defaultFont = \"EB Garamond\",\n  defaultColor = \"#000000\",\n  defaultTitleAlignment = \"center\",\n\n  font,\n  staffSize = 37.5,\n  baseFontSize = (staffSize * 19.2) / 37.5,\n  interSyllabicSpacing = 2.5,\n  spaceBetweenSystems = 1.5,\n  spaceAboveLyrics = 0.75,\n\n  textStyles = {},\n\n  onScoreUpdate,\n  onKeyDown,\n}: ExsurgeProps) => {\n  const supertitleSize = textStyles.supertitle?.size;\n  const titleSize = textStyles.title?.size;\n  const subtitleSize = textStyles.subtitle?.size;\n  const leftRightSize = textStyles.leftRight?.size;\n\n  const annotationArray = useArray(\n    annotation instanceof Array ? annotation : [annotation]\n  );\n  const textFontsArray = useArray([\n    textStyles.supertitle?.font,\n    textStyles.title?.font,\n    textStyles.subtitle?.font,\n    textStyles.leftRight?.font,\n    textStyles.annotation?.font,\n    textStyles.dropCap?.font,\n    textStyles.al?.font,\n    textStyles.choralSign?.font,\n    textStyles.lyric?.font,\n    textStyles.translation?.font,\n    font,\n    defaultFont,\n  ]);\n  const textSizesArray = useArray([\n    textStyles.supertitle?.size,\n    textStyles.title?.size,\n    textStyles.subtitle?.size,\n    textStyles.leftRight?.size,\n    textStyles.annotation?.size,\n    textStyles.dropCap?.size,\n    textStyles.al?.size,\n    textStyles.choralSign?.size,\n    textStyles.lyric?.size,\n    textStyles.translation?.size,\n  ]);\n  const textColorsArray = useArray([\n    textStyles.supertitle?.color,\n    textStyles.title?.color,\n    textStyles.subtitle?.color,\n    textStyles.leftRight?.color,\n    textStyles.annotation?.color,\n    textStyles.dropCap?.color,\n    textStyles.al?.color,\n    textStyles.choralSign?.color,\n    textStyles.lyric?.color,\n    textStyles.translation?.color,\n  ]);\n  const titleAlignmentsArray = useArray([\n    textStyles.supertitle?.alignment,\n    textStyles.title?.alignment,\n    textStyles.subtitle?.alignment,\n  ]);\n\n  const [, setRenderCount] = useState(0);\n  const ctxtRef: React.MutableRefObject<\n    exsurge.ChantContext | undefined\n  > = useRef();\n  const headerLenRef = useRef(0);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!ctxtRef.current) {\n    let ctxt = (ctxtRef.current = new exsurge.ChantContext(\n      exsurge.TextMeasuringStrategy.Canvas\n    ));\n\n    ctxt.specialCharProperties[\"font-family\"] = `Versiculum`;\n    ctxt.specialCharProperties[\"font-variant\"] = \"normal\";\n    ctxt.specialCharProperties[\"font-size\"] = \"120%\";\n    ctxt.specialCharProperties[\"font-weight\"] = \"400\";\n    ctxt.specialCharText = (char) => char.toLowerCase();\n    ctxt.textAfterSpecialChar = \"\";\n    ctxt.setRubricColor(\"#d00\");\n    ctxt.minSpaceAboveStaff = 0;\n\n    ctxt.editable = !!contentEditable;\n\n    ctxt.useExtraTextOnly = !contentEditable;\n  }\n\n  const ctxt: exsurge.ChantContext = ctxtRef.current;\n  const handleScoreUpdate = useCallback(\n    (score, gabcHeaderLen) => {\n      if (typeof onScoreUpdate === \"function\")\n        onScoreUpdate(score, gabcHeaderLen);\n    },\n    [onScoreUpdate]\n  );\n  const scoreRef: React.MutableRefObject<\n    exsurge.ChantScore | undefined\n  > = useRef();\n  function getScore() {\n    if (!scoreRef.current) scoreRef.current = new exsurge.ChantScore(ctxt);\n    return scoreRef.current;\n  }\n\n  const score = getScore();\n  if (process.env.NODE_ENV === \"development\") {\n    // DEBUG: window.$score = score;\n  }\n\n  // load font.  Right now we use Google, but webfontloader supports\n  // • edgewebfonts.adobe.com\n  // • Fontdeck.com\n  // • Fonts.com\n  // • Typekit.com\n  const loadedFontsRef: React.MutableRefObject<LoadedFontsDictionary> = useRef(\n    {}\n  );\n  useEffect(() => {\n    // TODO...keep track of whether Bold, Italic, etc. are needed, and load them as necessary\n\n    // first calculate which distinct fonts we need:\n    const loadedFonts = loadedFontsRef.current,\n      fontsUsedButNotLoaded = new Set(\n        getNotYetLoadedFonts(textFontsArray, loadedFonts)\n      ),\n      families = Array.from(fontsUsedButNotLoaded).map(\n        (font) => `${font}:400,400i,700,700i`\n      );\n    if (families.length) {\n      setFontLoaded(false);\n      WebFont.load({\n        google: {\n          families,\n        },\n        classes: false,\n        fontactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = true;\n            if (getNotYetLoadedFonts(textFontsArray, loadedFonts).length === 0)\n              // all required fonts have been loaded:\n              setFontLoaded(true);\n          }\n        },\n        fontinactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = false;\n          }\n        },\n      });\n    }\n  }, [textFontsArray]);\n\n  const resolveLocalFont = useCallback(\n    (newFont?: string) =>\n      resolveFont(loadedFontsRef.current, newFont, font, defaultFont),\n    [font, defaultFont]\n  );\n\n  // Set fonts, sizes, and colors:\n  useEffect(() => {\n    // don't set the fonts if they haven't yet loaded:\n    if (getNotYetLoadedFonts(textFontsArray, loadedFontsRef.current).length > 0)\n      return;\n    const interSyllabicMultiplier = interSyllabicSpacing;\n    ctxt.setStaffHeight(staffSize);\n    ctxt.interSyllabicMultiplier = interSyllabicMultiplier;\n    ctxt.interVerbalMultiplier = interSyllabicMultiplier * 0.25;\n    ctxt.spaceBetweenSystems = spaceBetweenSystems;\n    ctxt.minSpaceBelowStaff = spaceAboveLyrics;\n    ctxt.setFont(resolveLocalFont(textStyles.lyric?.font), baseFontSize);\n    for (let [k, textType] of Object.entries(exsurge.TextTypes)) {\n      // Is there a better way to do type assertion than this?\n      let key = k as keyof exsurge.TextTypes;\n      const textStyle = textStyles[key] || {};\n      // font\n      ctxt.textStyles[key].font = resolveLocalFont(textStyle.font);\n      // size\n      if (textType.defaultSize && textStyle.size !== undefined) {\n        ctxt.textStyles[key].size = textType.defaultSize(\n          textStyle.size * baseFontSize\n        );\n      }\n      // color\n      ctxt.textStyles[key].color = textStyle.color || defaultColor;\n      // alignment\n      switch (key) {\n        case \"supertitle\":\n        case \"title\":\n        case \"subtitle\":\n          ctxt.textStyles[key].alignment =\n            textStyle?.alignment || defaultTitleAlignment;\n          break;\n        // TODO: allow padding to be changed? on dropCap and annotation\n      }\n    }\n    ctxt.defaultLanguage = exsurge.language[alignment];\n    score.forceLayout = true;\n    // eslint-disable-next-line\n  }, [\n    fontLoaded,\n    font,\n    defaultFont,\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n\n    textSizesArray,\n    textFontsArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    ctxt,\n    score,\n  ]);\n\n  useEffect(() => {\n    score.useDropCap = useDropCap;\n    score.recreateDropCap(ctxt);\n    score.forceLayout = true;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [useDropCap, score, ctxt, handleScoreUpdate]);\n\n  const insertion =\n    selection && selection.element && selection.element.insertion;\n  const selectionInsertion = insertion\n    ? typeof insertion.afterElementIndex === \"number\"\n      ? insertion.afterElementIndex\n      : -1 - (insertion.chantLine || -1)\n    : undefined;\n  const previousSelectionInsertion = usePrevious(selectionInsertion);\n  const elementSelection = (selection && selection.element) || null;\n  useEffect(() => {\n    headerLenRef.current = exsurge.Gabc.updateMappingsFromSource(\n      ctxt,\n      score.mappings,\n      gabc,\n      selectionInsertion,\n      previousSelectionInsertion\n    );\n    score.updateNotations(ctxt);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [gabc, selectionInsertion, ctxt, score, handleScoreUpdate]);\n\n  useEffect(() => {\n    score.annotation = annotationArray.length\n      ? new exsurge.Annotations(ctxt, ...annotationArray)\n      : null;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [annotationArray, ctxt, score, handleScoreUpdate]);\n\n  // title effects:\n  useEffect(() => {\n    score.titles.setSupertitle(ctxt, supertitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, supertitle, supertitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTitle(ctxt, title);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, title, titleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setSubtitle(ctxt, subtitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, subtitle, subtitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextLeft(ctxt, textLeft);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textLeft, leftRightSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextRight(ctxt, textRight);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textRight, leftRightSize, handleScoreUpdate]);\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.performLayout(ctxt, score.forceLayout);\n    score.forceLayout = false;\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    handleScoreUpdate,\n  ]);\n\n  // const appendSvgForPage = useCallback(pageI => {\n  //   const svgParent = divRefs.current[pageI];\n  //   while (svgParent && svgParent.firstChild)\n  //     svgParent.removeChild(svgParent.firstChild);\n  //   let svg = svgRefs.current[pageI];\n  //   if (svgParent && svg) svgParent.appendChild(svg);\n  // }, []);\n\n  // const divRefs = useRef([]),\n  //   svgRefs = useRef([]);\n  // const [pageCount, setPageCount] = useState(1);\n  // const addSvgRef = (ref, i) => {\n  //   divRefs.current[i] = ref;\n  //   appendSvgForPage(i);\n  // };\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.layoutChantLines(ctxt, width);\n    if (height > 0) {\n      score.paginate(height);\n      // setPageCount(score.pages.length);\n    }\n    setRenderCount((count) => count + 1);\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    supertitle,\n    title,\n    subtitle,\n    textLeft,\n    textRight,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    width,\n    height,\n    handleScoreUpdate,\n  ]);\n\n  // selection:\n  useEffect(() => {\n    let newSelection: exsurge.Selection = {};\n    if (elementSelection) newSelection.element = elementSelection;\n    score.updateSelection(newSelection);\n    setRenderCount((count) => count + 1);\n  }, [score, ctxt, elementSelection]);\n\n  const createReactSvg = (\n    svgTree: exsurge.SvgTreeNode | string\n  ): React.ReactElement | string =>\n    typeof svgTree === \"string\"\n      ? svgTree\n      : React.createElement(\n          svgTree.name || React.Fragment,\n          svgTree.props,\n          ...(svgTree.children || []).map(createReactSvg)\n        );\n\n  const divs = (score.pages || []).map((page, i) => (\n    <div\n      key={i}\n      id={id && id + \"-\" + i}\n      className={`Exsurge ${className || \"\"}`}\n      style={style}\n      contentEditable={contentEditable}\n      onKeyDown={onKeyDown}\n    >\n      {createReactSvg(page.createSvgTree(ctxt, zoom))}\n    </div>\n  ));\n\n  return <>{divs}</>;\n};\n\nexport default Exsurge;\nexport * from \"exsurge\";\n"],"file":"Exsurge.js"}