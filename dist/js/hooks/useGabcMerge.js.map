{"version":3,"sources":["../../../src/hooks/useGabcMerge.tsx"],"names":["useGabcMerge","syllabifiedText","musicalNotation","useLargeInitial","normalizeInputs","text","notation","splitInputs","syllables","notationNodes","sylNdx","isFirstSyl","result","map","mapSyllable","syllable","nextIndex","isFirstSyllable","join","trim","length","replace","regexClef","regexNonSyllabicGabc","regexFindParensWithLeadSpaces","regexFindParens","test","split","filter","syl","stripParens","s","getSyllable","index","getNonSyllable","syllableNdx","noSyllable","nextSyllable","slice","capitalizeInitial","toUpperCase","toLowerCase"],"mappings":"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","sourcesContent":["    export const useGabcMerge = (syllabifiedText: string, musicalNotation: string, useLargeInitial: boolean = true) => {\n\n      const { text, notation } = normalizeInputs(syllabifiedText, musicalNotation);\n\n      if (!notation) return text;\n\n      const { syllables, notationNodes } = splitInputs(text, notation);\n\n      let sylNdx = 0\n      let isFirstSyl = true;\n      let result = notationNodes\n        .map((notation) => {\n          const { syllable, nextIndex, isFirstSyllable } = mapSyllable(notation, syllables, sylNdx, isFirstSyl);\n          sylNdx = nextIndex;\n          isFirstSyl = isFirstSyllable;\n          return syllable;\n        })\n        .join('')\n        .trim()\n      ;\n\n      // add any additional syllables that come after the last notation data:\n      while (sylNdx < syllables.length) {\n        result +=\n          syllables[sylNdx++].replace(/^(\\s*)\"?\\(?(.*?)\\)?\"?$/, '$1$2') + '()';\n      }\n      return result;\n    }\n\n    /*-----  REGEX DEFS  -----*/\n    const regexClef = /^[cf]b?[1-4]$/;\n    const regexNonSyllabicGabc = /^([cf]b?[1-4]|[,;:`]+|[a-m]\\+|[zZ]0?)+$/;\n    const regexFindParensWithLeadSpaces = /^(\\s*)\\((.*)\\)$/;\n    const regexFindParens = /^\\((.*)\\)$/;\n\n    /*-----  NORMALIZATION FUNCTIONS  -----*/\n    const normalizeInputs = (text: string, notation: string): { text: string, notation: string } => {\n      // normalize the text, getting rid of multiple consecutive whitespace,\n      // and handling lilypond's \\forceHyphen directive\n      \n      // remove flex and mediant symbols if accents are marked with pipes:\n      if (/\\|/.test(text)) {\n        text = text.replace(/[†*]/g, \"\");\n      }\n      text = text\n        .replace(/%[^\\n]*(\\n|$)/g, '$1')\n        .replace(/\\s*\\n\\s*/g, '\\n')\n        .replace(/(\\s)\\s+/g, '$1')\n        .replace(/\\\\forceHyphen\\s+(\\S+)\\s+--\\s+/g, '$1-')\n        .replace(/\\|([^|]+)\\|/g, '+$1+')\n        .replace(/([ -])\\+|\\+(\\W*(?:[-\\s]|$))/g, '$1$2')\n        .trim()\n      ;\n\n      notation = notation.replace(/%[^\\n]*(\\n|$)/g, '$1').trim();\n\n      return { text, notation }\n    }\n\n    const splitInputs = (text: string, notation: string): { syllables: string[], notationNodes: string[] } => {\n      const syllables = text\n      .split(/\\s+--\\s+|\\+|(\\s*\\(?\"[^\"]+\"\\)?-?)|(\\s*[^\\s-+]+-)(?=[^\\s-])|(?=\\s)/)\n        .filter((syl) => syl && syl.trim());\n\n      const notationNodes = notation.split(/\\s+/);\n\n      return { syllables, notationNodes };\n    }\n\n    /*-----  STRING UTIL FUNCTIONS  -----*/\n    const stripParens = (s: string) => {\n      return s.replace(regexFindParensWithLeadSpaces, '$1$2')\n          s.replace(regexFindParens, '$1')\n      ;\n    }\n\n    /*-----  GETTER FUNCTIONS  -----*/\n    const getSyllable = (syllables: string[], index: number) => {\n      return (syllables[index] || ' ').replace(/^(\\s*)\"(.*)\"$/, '$1$2');\n    }\n\n    const getNonSyllable = (syllables: string[], syllableNdx: number, notation: string): string => {\n      let syllable = syllables[syllableNdx];\n\n      if (/^(\\s*!|[^a-záéíóúýàèìòùäëïöüÿæœǽœ́]+$|\\s*\\(.*\\)$|\\s*\"\\(.*\\)\"$)/i.test(syllable)\n          && !regexClef.test(notation)) {\n\n        return syllable.replace(/^(\\s*)!/, '$1')\n            .replace(/^(\\s*)\"?\\((.*?)\\)\"?$/, '$1$2')\n        ;\n      }\n\n      return ' ';\n    }\n\n    /*-----  PROCESSOR FUNCTIONS  -----*/\n    const mapSyllable = (\n      notation: string,\n      syllables: string[],\n      sylNdx: number,\n      isFirstSyllable: boolean\n    ): { syllable: string, nextIndex: number, isFirstSyllable: boolean } => {\n      const noSyllable = regexNonSyllabicGabc.test(notation) || /^\\(.*\\)$/.test(notation);\n      notation = stripParens(notation);\n\n      let syllable = noSyllable ? getNonSyllable(syllables, sylNdx, notation) : getSyllable(syllables, sylNdx++);\n      if (!noSyllable) {\n        let nextSyllable = syllable;\n        syllable = stripParens(syllable);\n\n        while (/^\\s*\\(.*\\)$/.test(nextSyllable)) {\n          if (/^\".*\"$/.test(syllable)) {\n            syllable = syllable.slice(1, -1);\n          }\n\n          nextSyllable = getSyllable(syllables, sylNdx++);\n          syllable += '()' + stripParens(nextSyllable);\n        }\n\n        if (isFirstSyllable) {\n          isFirstSyllable = false;\n\n          syllable = capitalizeInitial(syllable, syllables[sylNdx]);\n        }\n      }\n\n      syllable = syllable + '(' + notation + ')';\n\n      return { syllable, nextIndex: sylNdx, isFirstSyllable }\n    }\n\n    const capitalizeInitial = (syllable: string, nextSyllable: string): string => {\n      if (/^\\s*[a-záéíóúýàèìòùäëïöüÿæœǽœ́]+/i.test(syllable)) {\n        // special capitalization rules for the large initial:\n        // the second letter should also be capitalized, and the third as well,\n        // if it is a three letter word\n        syllable = syllable.slice(0, 2).toUpperCase() + syllable.slice(2).toLowerCase();\n        if (syllable.length === 3 && /^\\s/.test(nextSyllable)) {\n          syllable = syllable.toUpperCase();\n        }\n      }\n\n      return syllable;\n    }\n"],"file":"useGabcMerge.js"}