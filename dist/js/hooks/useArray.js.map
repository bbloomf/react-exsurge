{"version":3,"sources":["../../../src/hooks/useArray.ts"],"names":["useArray","value","ref","JSON","stringify","current"],"mappings":";;;;;;;;;AAAA;;;;;;AAEA;;;;;;AAMA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAIC,KAAJ,EAAwB;AACvC;AACA;AACA,MAAMC,GAAG,GAAG,mBAAYD,KAAZ,CAAZ,CAHuC,CAKvC;;AACA,MAAIE,IAAI,CAACC,SAAL,CAAeH,KAAf,MAA0BE,IAAI,CAACC,SAAL,CAAeF,GAAG,CAACG,OAAnB,CAA9B,EAA2D;AACzDH,IAAAA,GAAG,CAACG,OAAJ,GAAcJ,KAAd;AACD;;AAED,SAAOC,GAAG,CAACG,OAAX;AACD,CAXD;;eAaeL,Q","sourcesContent":["import { useRef } from \"react\";\n\n/**\n * ensure that an array has the same reference as last time, whenever its contents are the same as last time\n * JSON.stringify is currently used to compare the values; this could be improved, but I'm mostly using it for string arrays,\n * so I don't think it would improve performance very much to use a more efficient method of checking equality\n * @param value the array\n */\nconst useArray = <T>(value: T[]): T[] => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T[]>(value);\n\n  // update the array reference only if the string values are different:\n  if (JSON.stringify(value) !== JSON.stringify(ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n};\n\nexport default useArray;\n"],"file":"useArray.js"}