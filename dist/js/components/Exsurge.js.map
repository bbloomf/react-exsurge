{"version":3,"sources":["../../../src/components/Exsurge.tsx"],"names":["createReactSvg","svgTree","React","createElement","name","Fragment","props","children","map","Exsurge","gabc","useDropCap","annotation","contentEditable","alignment","width","height","zoom","selection","id","style","className","svgClass","supertitle","title","subtitle","textLeft","textRight","defaultFont","defaultColor","defaultTitleAlignment","font","staffSize","baseFontSize","interSyllabicSpacing","spaceBetweenSystems","spaceAboveLyrics","textStyles","onScoreUpdate","onRender","onKeyDown","mapAnnotationSpansToTextLeft","contextCreated","addSvgClass","node","propKey","classNamePrefix","supertitleSize","size","titleSize","subtitleSize","leftRightSize","leftRight","annotationArray","Array","textFontsArray","dropCap","al","choralSign","lyric","translation","textSizesArray","textColorsArray","color","titleAlignmentsArray","setRenderCount","ctxtRef","headerLenRef","fontLoaded","setFontLoaded","current","ctxt","exsurge","ChantContext","TextMeasuringStrategy","Canvas","specialCharProperties","defaultSpecialCharText","specialCharText","char","toLowerCase","textAfterSpecialChar","autoColor","setRubricColor","minSpaceAboveStaff","editable","useExtraTextOnly","handleScoreUpdate","score","gabcHeaderLen","scoreRef","getScore","ChantScore","process","env","NODE_ENV","loadedFontsRef","loadedFonts","fontsUsedButNotLoaded","Set","families","from","length","WebFont","load","google","classes","fontactive","familyName","fvd","fontinactive","resolveLocalFont","newFont","interSyllabicMultiplier","setStaffHeight","interVerbalMultiplier","minSpaceBelowStaff","setFont","Object","entries","TextTypes","k","textType","key","textStyle","defaultSize","undefined","defaultLanguage","language","forceLayout","recreateDropCap","insertion","element","selectionInsertion","afterElementIndex","chantLine","previousSelectionInsertion","elementSelection","Gabc","updateMappingsFromSource","mappings","updateNotations","Annotations","titles","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","performLayout","layoutChantLines","paginate","count","newSelection","updateSelection","divs","pages","page","i","createSvgTree"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport WebFont from \"webfontloader\";\nimport * as exsurge from \"exsurge\";\nimport { SvgTreeNode } from \"exsurge\";\nimport { TextTypesOptions } from \"../interfaces/TextTypeOptions\";\nimport { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport useArray from \"../hooks/useArray\";\nimport getNotYetLoadedFonts from \"../utils/getNotYetLoadedFonts\";\nimport resolveFont from \"../utils/resolveFont\";\n\nexport interface SharedExsurgeProps {\n  useDropCap?: boolean;\n  annotation?: string | string[];\n  contentEditable?: boolean;\n  alignment?: \"english\" | \"latin\";\n  width?: number;\n  height?: number;\n  zoom?: number;\n  selection?: exsurge.Selection;\n\n  id?: string;\n  style?: any;\n  className?: string;\n  svgClass?: string;\n\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  textLeft?: string;\n  textRight?: string;\n\n  defaultFont?: string;\n  defaultColor?: string;\n  defaultTitleAlignment?: string;\n\n  font?: string;\n  baseFontSize?: number;\n  staffSize?: number;\n  interSyllabicSpacing?: number;\n  spaceBetweenSystems?: number;\n  spaceAboveLyrics?: number;\n\n  textStyles?: TextTypesOptions;\n\n  onScoreUpdate?(score: exsurge.ChantScore, gabceHeaderLen: number): any;\n  onRender?: () => void;\n  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): any;\n  mapAnnotationSpansToTextLeft?: exsurge.AnnotationSpansToTextLeftMapper;\n  contextCreated?: (ctxt: exsurge.ChantContext) => void;\n}\n\nconst createReactSvg = (\n  svgTree: exsurge.SvgTreeNode | string\n): React.ReactElement | string =>\n  typeof svgTree === \"string\"\n    ? svgTree\n    : React.createElement(\n        svgTree.name || React.Fragment,\n        svgTree.props,\n        ...(svgTree.children || []).map(createReactSvg)\n      );\n\nexport interface ExsurgeProps extends SharedExsurgeProps {\n  gabc: string;\n}\n\nconst Exsurge: React.FC<ExsurgeProps> = ({\n  gabc,\n  useDropCap = true,\n  annotation = [],\n  contentEditable = false,\n  alignment = \"latin\",\n  width = -1,\n  height = -1,\n  zoom,\n  selection,\n\n  id,\n  style,\n  className,\n  svgClass,\n\n  supertitle,\n  title,\n  subtitle,\n  textLeft,\n  textRight,\n\n  defaultFont = \"EB Garamond\",\n  defaultColor = \"#000000\",\n  defaultTitleAlignment = \"center\",\n\n  font,\n  staffSize = 37.5,\n  baseFontSize = (staffSize * 19.2) / 37.5,\n  interSyllabicSpacing = 2.5,\n  spaceBetweenSystems = 1.5,\n  spaceAboveLyrics = 0.75,\n\n  textStyles = {},\n\n  onScoreUpdate,\n  onRender,\n  onKeyDown,\n  mapAnnotationSpansToTextLeft,\n  contextCreated,\n}: ExsurgeProps) => {\n  const addSvgClass = useMemo(\n    () =>\n      svgClass\n        ? (node: SvgTreeNode) => {\n            const props = node.props || (node.props = {});\n            const propKey = 'class' in props ? 'class' : 'className';\n            const classNamePrefix = props[propKey]\n              ? props[propKey] + \" \"\n              : \"\";\n            props[propKey] = classNamePrefix + svgClass;\n            return node;\n          }\n        : (node: SvgTreeNode) => node,\n    [svgClass]\n  );\n\n  const supertitleSize = textStyles.supertitle?.size;\n  const titleSize = textStyles.title?.size;\n  const subtitleSize = textStyles.subtitle?.size;\n  const leftRightSize = textStyles.leftRight?.size;\n\n  const annotationArray = useArray(\n    annotation instanceof Array ? annotation : [annotation]\n  );\n  const textFontsArray = useArray([\n    textStyles.supertitle?.font,\n    textStyles.title?.font,\n    textStyles.subtitle?.font,\n    textStyles.leftRight?.font,\n    textStyles.annotation?.font,\n    textStyles.dropCap?.font,\n    textStyles.al?.font,\n    textStyles.choralSign?.font,\n    textStyles.lyric?.font,\n    textStyles.translation?.font,\n    font,\n    defaultFont,\n  ]);\n  const textSizesArray = useArray([\n    textStyles.supertitle?.size,\n    textStyles.title?.size,\n    textStyles.subtitle?.size,\n    textStyles.leftRight?.size,\n    textStyles.annotation?.size,\n    textStyles.dropCap?.size,\n    textStyles.al?.size,\n    textStyles.choralSign?.size,\n    textStyles.lyric?.size,\n    textStyles.translation?.size,\n  ]);\n  const textColorsArray = useArray([\n    textStyles.supertitle?.color,\n    textStyles.title?.color,\n    textStyles.subtitle?.color,\n    textStyles.leftRight?.color,\n    textStyles.annotation?.color,\n    textStyles.dropCap?.color,\n    textStyles.al?.color,\n    textStyles.choralSign?.color,\n    textStyles.lyric?.color,\n    textStyles.translation?.color,\n  ]);\n  const titleAlignmentsArray = useArray([\n    textStyles.supertitle?.alignment,\n    textStyles.title?.alignment,\n    textStyles.subtitle?.alignment,\n  ]);\n\n  const [, setRenderCount] = useState(0);\n  const ctxtRef: React.MutableRefObject<\n    exsurge.ChantContext | undefined\n  > = useRef();\n  const headerLenRef = useRef(0);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!ctxtRef.current) {\n    let ctxt = (ctxtRef.current = new exsurge.ChantContext(\n      exsurge.TextMeasuringStrategy.Canvas\n    ));\n\n    ctxt.specialCharProperties[\"font-family\"] = `Versiculum`;\n    ctxt.specialCharProperties[\"font-variant\"] = \"normal\";\n    ctxt.specialCharProperties[\"font-weight\"] = \"400\";\n    const defaultSpecialCharText = ctxt.specialCharText || ((char: string) => char);\n    ctxt.specialCharText = (char) => defaultSpecialCharText(char).toLowerCase();\n    ctxt.textAfterSpecialChar = \"\";\n    ctxt.autoColor = false;\n    ctxt.setRubricColor(\"\");\n    ctxt.minSpaceAboveStaff = 0;\n\n    ctxt.editable = !!contentEditable;\n\n    ctxt.useExtraTextOnly = !contentEditable;\n    contextCreated?.(ctxt);\n  }\n\n  const ctxt: exsurge.ChantContext = ctxtRef.current;\n  useEffect(() => {\n    if (typeof mapAnnotationSpansToTextLeft === 'function') {\n      ctxt.mapAnnotationSpansToTextLeft = mapAnnotationSpansToTextLeft;\n    }\n  }, [ctxt, mapAnnotationSpansToTextLeft])\n\n  const handleScoreUpdate = useCallback(\n    (score, gabcHeaderLen) => onScoreUpdate?.(score, gabcHeaderLen),\n    [onScoreUpdate]\n  );\n  const scoreRef: React.MutableRefObject<\n    exsurge.ChantScore | undefined\n  > = useRef();\n  function getScore() {\n    if (!scoreRef.current) scoreRef.current = new exsurge.ChantScore(ctxt);\n    return scoreRef.current;\n  }\n\n  const score = getScore();\n  if (process.env.NODE_ENV === \"development\") {\n    // DEBUG: window.$score = score;\n  }\n\n  // load font.  Right now we use Google, but webfontloader supports\n  // • edgewebfonts.adobe.com\n  // • Fontdeck.com\n  // • Fonts.com\n  // • Typekit.com\n  const loadedFontsRef: React.MutableRefObject<LoadedFontsDictionary> = useRef(\n    {}\n  );\n  useEffect(() => {\n    // TODO...keep track of whether Bold, Italic, etc. are needed, and load them as necessary\n\n    // first calculate which distinct fonts we need:\n    const loadedFonts = loadedFontsRef.current,\n      fontsUsedButNotLoaded = new Set(\n        getNotYetLoadedFonts(textFontsArray, loadedFonts)\n      ),\n      families = Array.from(fontsUsedButNotLoaded).map(\n        (font) => `${font}:400,400i,700,700i`\n      );\n    if (families.length) {\n      setFontLoaded(false);\n      WebFont.load({\n        google: {\n          families,\n        },\n        classes: false,\n        fontactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = true;\n            if (getNotYetLoadedFonts(textFontsArray, loadedFonts).length === 0)\n              // all required fonts have been loaded:\n              setFontLoaded(true);\n          }\n        },\n        fontinactive: (familyName, fvd) => {\n          if (fvd === \"n4\") {\n            loadedFonts[familyName] = false;\n          }\n        },\n      });\n    }\n  }, [textFontsArray]);\n\n  const resolveLocalFont = useCallback(\n    (newFont?: string) =>\n      resolveFont(loadedFontsRef.current, newFont, font, defaultFont),\n    [font, defaultFont]\n  );\n\n  // Set fonts, sizes, and colors:\n  useEffect(() => {\n    // don't set the fonts if they haven't yet loaded:\n    if (getNotYetLoadedFonts(textFontsArray, loadedFontsRef.current).length > 0)\n      return;\n    const interSyllabicMultiplier = interSyllabicSpacing;\n    ctxt.setStaffHeight(staffSize);\n    ctxt.interSyllabicMultiplier = interSyllabicMultiplier;\n    ctxt.interVerbalMultiplier = interSyllabicMultiplier * 0.25;\n    ctxt.spaceBetweenSystems = spaceBetweenSystems;\n    ctxt.minSpaceBelowStaff = spaceAboveLyrics;\n    ctxt.setFont(resolveLocalFont(textStyles.lyric?.font), baseFontSize);\n    for (let [k, textType] of Object.entries(exsurge.TextTypes)) {\n      // Is there a better way to do type assertion than this?\n      let key = k as keyof exsurge.TextTypes;\n      const textStyle = textStyles[key] || {};\n      // font\n      ctxt.textStyles[key].font = resolveLocalFont(textStyle.font);\n      // size\n      if (textType.defaultSize && textStyle.size !== undefined) {\n        ctxt.textStyles[key].size = textType.defaultSize(\n          textStyle.size * baseFontSize\n        );\n      }\n      // color\n      ctxt.textStyles[key].color = textStyle.color || defaultColor;\n      // alignment\n      switch (key) {\n        case \"supertitle\":\n        case \"title\":\n        case \"subtitle\":\n          ctxt.textStyles[key].alignment =\n            textStyle?.alignment || defaultTitleAlignment;\n          break;\n        // TODO: allow padding to be changed? on dropCap and annotation\n      }\n    }\n    ctxt.defaultLanguage = exsurge.language[alignment];\n    score.forceLayout = true;\n    // eslint-disable-next-line\n  }, [\n    fontLoaded,\n    font,\n    defaultFont,\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n\n    textSizesArray,\n    textFontsArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    ctxt,\n    score,\n  ]);\n\n  useEffect(() => {\n    score.useDropCap = useDropCap;\n    score.recreateDropCap(ctxt);\n    score.forceLayout = true;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [useDropCap, score, ctxt, handleScoreUpdate]);\n\n  const insertion =\n    selection && selection.element && selection.element.insertion;\n  const selectionInsertion = insertion\n    ? typeof insertion.afterElementIndex === \"number\"\n      ? insertion.afterElementIndex\n      : -1 - (insertion.chantLine || -1)\n    : undefined;\n  const previousSelectionInsertion = usePrevious(selectionInsertion);\n  const elementSelection = (selection && selection.element) || null;\n  useEffect(() => {\n    headerLenRef.current = exsurge.Gabc.updateMappingsFromSource(\n      ctxt,\n      score.mappings,\n      gabc,\n      selectionInsertion,\n      previousSelectionInsertion\n    );\n    score.updateNotations(ctxt);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [gabc, selectionInsertion, ctxt, score, handleScoreUpdate]);\n\n  useEffect(() => {\n    score.annotation = annotationArray.length\n      ? new exsurge.Annotations(ctxt, ...annotationArray)\n      : null;\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [annotationArray, ctxt, score, handleScoreUpdate]);\n\n  // title effects:\n  useEffect(() => {\n    score.titles.setSupertitle(ctxt, supertitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, supertitle, supertitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTitle(ctxt, title);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, title, titleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setSubtitle(ctxt, subtitle);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, subtitle, subtitleSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextLeft(ctxt, textLeft);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textLeft, leftRightSize, handleScoreUpdate]);\n  useEffect(() => {\n    score.titles.setTextRight(ctxt, textRight);\n    handleScoreUpdate(score, headerLenRef.current);\n  }, [score, ctxt, textRight, leftRightSize, handleScoreUpdate]);\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.performLayout(ctxt, score.forceLayout);\n    score.forceLayout = false;\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    handleScoreUpdate,\n  ]);\n\n  // const appendSvgForPage = useCallback(pageI => {\n  //   const svgParent = divRefs.current[pageI];\n  //   while (svgParent && svgParent.firstChild)\n  //     svgParent.removeChild(svgParent.firstChild);\n  //   let svg = svgRefs.current[pageI];\n  //   if (svgParent && svg) svgParent.appendChild(svg);\n  // }, []);\n\n  // const divRefs = useRef([]),\n  //   svgRefs = useRef([]);\n  // const [pageCount, setPageCount] = useState(1);\n  // const addSvgRef = (ref, i) => {\n  //   divRefs.current[i] = ref;\n  //   appendSvgForPage(i);\n  // };\n\n  useEffect(() => {\n    if (!fontLoaded) return;\n    score.layoutChantLines(ctxt, width);\n    if (height > 0) {\n      score.paginate(height);\n      // setPageCount(score.pages.length);\n    }\n    setRenderCount((count) => count + 1);\n    onRender?.();\n  }, [\n    score,\n    ctxt,\n    fontLoaded,\n    onRender,\n\n    textFontsArray,\n    textSizesArray,\n    textColorsArray,\n    titleAlignmentsArray,\n\n    supertitle,\n    title,\n    subtitle,\n    textLeft,\n    textRight,\n\n    staffSize,\n    interSyllabicSpacing,\n    spaceBetweenSystems,\n    baseFontSize,\n    alignment,\n    useDropCap,\n    gabc,\n    selectionInsertion,\n    annotationArray,\n    width,\n    height,\n    handleScoreUpdate,\n  ]);\n\n  // selection:\n  useEffect(() => {\n    let newSelection: exsurge.Selection = {};\n    if (elementSelection) newSelection.element = elementSelection;\n    score.updateSelection(newSelection);\n    setRenderCount((count) => count + 1);\n  }, [score, ctxt, elementSelection]);\n\n  const divs = (score.pages || []).map((page, i) => (\n    <div\n      key={i}\n      id={id && id + \"-\" + i}\n      className={`Exsurge ${className || \"\"}`}\n      style={style}\n      onKeyDown={onKeyDown}\n    >\n      {createReactSvg(addSvgClass(page.createSvgTree(ctxt, zoom)))}\n    </div>\n  ));\n\n  return <>{divs}</>;\n};\n\nexport default Exsurge;\nexport * from \"exsurge\";\n"],"file":"Exsurge.js"}