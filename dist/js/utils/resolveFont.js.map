{"version":3,"sources":["../../../src/utils/resolveFont.ts"],"names":["resolveFont","loadedFonts","newFont","font","defaultFont"],"mappings":";;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAClBC,WADkB,EAElBC,OAFkB,EAGlBC,IAHkB,EAIlBC,WAJkB,EAKP;AACX,MAAI,CAACF,OAAD,IAAY,EAAEA,OAAO,IAAID,WAAb,CAAZ,IAAyCA,WAAW,CAACC,OAAD,CAAX,KAAyB,KAAtE,EAA6E;AAC3E,QAAIC,IAAI,IAAIA,IAAI,KAAKD,OAArB,EAA8B;AAC5B,aAAOF,WAAW,CAACC,WAAD,EAAcE,IAAd,EAAoBA,IAApB,EAA0BC,WAA1B,CAAlB;AACD,KAFD,MAEO;AACL,aAAOA,WAAP;AACD;AACF;;AACD,SAAOF,OAAP;AACD,CAdD;;eAgBeF,W","sourcesContent":["import { LoadedFontsDictionary } from \"../interfaces/LoadedFontsDictionary\";\n\nconst resolveFont = (\n  loadedFonts: LoadedFontsDictionary,\n  newFont: string | undefined,\n  font: string | undefined,\n  defaultFont: string\n): string => {\n  if (!newFont || !(newFont in loadedFonts) || loadedFonts[newFont] === false) {\n    if (font && font !== newFont) {\n      return resolveFont(loadedFonts, font, font, defaultFont);\n    } else {\n      return defaultFont;\n    }\n  }\n  return newFont;\n};\n\nexport default resolveFont;\n"],"file":"resolveFont.js"}